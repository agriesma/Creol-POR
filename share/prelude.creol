/*
 * prelude.creol
 *
 * Copyright (c) 2007
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

datatype Data

fun = (a: Data, b: Data): Bool == extern "="
fun /= (a: Data, b: Data): Bool == extern "/="

datatype Bool

fun ~ (a: Bool) : Bool == extern "~"
fun && (a: Bool, b: Bool): Bool == extern "&&"
fun || (a: Bool, b: Bool): Bool == extern "||"
fun => (a: Bool, b: Bool): Bool == extern "=>"
fun ^ (a: Bool, b: Bool): Bool == extern "^"
fun <=> (a: Bool, b: Bool): Bool == extern "<=>"

datatype Real

fun - (a: Real): Real == extern "-"
fun + (a: Real, b: Real): Real == extern "+"
fun - (a: Real, b: Real): Real == extern "-"
fun * (a: Real, b: Real): Real == extern "*"
fun / (a: Real, b: Real): Real == extern "/"
fun % (a: Real, b: Real): Real == extern "%"
fun ** (a: Real, b: Real): Real == extern "**"

fun < (a: Real, b: Real): Bool == extern "<"
fun <= (a: Real, b: Real): Bool == extern "<="
fun > (a: Real, b: Real): Bool == extern ">"
fun >= (a: Real, b: Real): Bool == extern ">="

datatype Int of Real

fun - (a: Int): Int == extern "-"
fun + (a: Int, b: Int): Int == extern "+"
fun - (a: Int, b: Int): Int == extern "-"
fun * (a: Int, b: Int): Int == extern "*"
fun / (a: Int, b: Int): Int == extern "/"
fun div(a: Int, b: Int): Int == extern "div"
fun % (a: Int, b: Int): Int == extern "%"
fun ** (a: Int, b: Int): Int == extern "**"
fun random(seed: Int): Int == extern "random"

fun < (a: Int, b: Int): Bool == extern "<"
fun <= (a: Int, b: Int): Bool == extern "<="
fun > (a: Int, b: Int): Bool == extern ">"
fun >= (a: Int, b: Int): Bool == extern ">="
fun real_of_int(a: Int) : Real == extern "real_of_int"

datatype String

fun |- (a: String, b: String): String == extern "|-"
fun -| (a: String, b: String): String == extern "-|"
fun |-| (a: String, b: String): String == extern "|-|"
fun # (a: String): Int == extern "#"

fun < (a: String, b: String): Bool == extern "<"
fun <= (a: String, b: String): Bool == extern "<="
fun > (a: String, b: String): Bool == extern ">"
fun >= (a: String, b: String): Bool == extern ">="

datatype List[`a]

fun head(l: List[`a]): `a == extern "head"
fun tail(l: List[`a]): List[`a] == extern "tail"
fun last(l: List[`a]): `a == extern "last"
fun rest(l: List[`a]): List[`a] == extern "rest"
fun nth(l: List[`a], n: Int): `a == extern "nth"
fun rnth(l: List[`a], n: Int): `a == extern "rnth"
fun in(e: `a, l: List[`a]): Bool == extern "in"
fun remove(l: List[`a], e: `a): List[`a] == extern "remove"
fun -|(e: `a, l: List[`a]): List[`a] == extern "-|"
fun |-(l: List[`a], e: `a): List[`a] == extern "|-"
fun |-|(l: List[`a], m: List[`a]): List[`a] == extern "|-|"
fun #(l: List[`a]): Int == extern "length"
fun isempty(l: List[`a]): Bool == extern "isempty"
fun reverse(l: List[`a]): List[`a] == extern "reverse"
fun after(l: List[`a], p: Int): List[`a] == extern "after"
fun sub(l: List[`a], n: Int, m: Int): List[`a] == extern "sub"
fun begwith(l: List[`a], m: List[`a]): Bool == extern "begwith"
fun endswith(l: List[`a], m: List[`a]): Bool == extern "endswith"
fun index(l: List[`a], e: `a): Int == extern "index"
fun rindex(l: List[`a], e: `a): Int == extern "rindex"
fun replace(l: List[`a], e: `a, p: Int): List[`a] == extern "replace"
fun make_list(e: `a, p: Int): List[`a] == extern "gen_list"
fun make_range(e: Int): List[Int] == extern "make_range"
fun make_range(s: Int, e: Int): List[Int] == extern "make_range"
fun make_range(s: Int, e: Int, t: Int): List[Int] == extern "make_range"

// More to come.

datatype Set[`a]

fun #(s: Set[`a]): Int == extern "#"
fun remove(s: Set[`a], e: `a): Set[`a] == extern "remove"
fun add(s: Set[`a], e: `a): Set[`a] == extern "add"
fun in(e: `a, s: Set[`a]): Bool == extern "in"
fun union(s: Set[`a], t: Set[`a]): Set[`a] == extern "union"
fun inter(s: Set[`a], t: Set[`a]): Set[`a] == extern "inter"
fun diff(s: Set[`a], t: Set[`a]): Set[`a] == extern "diff"

// More to come.


// datatype Pair

fun fst (a: [`a, `b]): `a == extern "fst"
fun snd (a: [`a, `b]): `b == extern "snd"

datatype Time

fun <(a: Time, b: Time): Bool == extern "<"
fun <=(a: Time, b: Time): Bool == extern "<="
fun >=(a: Time, b: Time): Bool == extern ">="
fun >(a: Time, b: Time): Bool == extern ">"

datatype Duration

fun dur(a: Real): Duration == extern "duration"
fun +(a: Time, d: Duration): Time == extern "+"
fun -(a: Time, d: Duration): Time == extern "-"
fun -(a: Time, b: Time): Duration == extern "-"
fun +(a: Duration, d: Duration): Duration == extern "+"
fun -(a: Duration, d: Duration): Duration == extern "-"
fun *(a: Duration, s: Real): Duration == extern "*"
fun *(a: Real, s: Duration): Duration == extern "*"
fun /(a: Duration, s: Real): Duration == extern "/"
fun <(a: Duration, b: Duration): Bool == extern "<"
fun <=(a: Duration, b: Duration): Bool == extern "<="
fun >=(a: Duration, b: Duration): Bool == extern ">="
fun >(a: Duration, b: Duration): Bool == extern ">"

datatype Event

fun id(e: Event): Int == extern ""
fun sender(e: Event): Any == extern ""
fun receiver(e: Event): Any == extern ""
fun call(e: Event): Bool == extern ""
fun method(e: Event): String == extern ""
fun arguments(e: Event): List[Data] == extern ""
fun results(e: Event): List[Data] == extern ""
fun time(e: Event): Time == extern ""

interface Any
begin
inv true
end
