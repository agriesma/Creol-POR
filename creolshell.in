#! /bin/sh
#
# A shell for creol
#
# This file is part of creoltools
#
# Written and Copyright (c) 2007 by Marcel Kyas
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Use unset when possible
if ( ( MAIL=60 ; unset MAIL ) || exit) >/dev/null 2>&1 ; then
  as_unset=unset
else
  as_unset=false
fi

# NLS nuisances.
for as_var in \
  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
  LC_TELEPHONE LC_TIME
do
  if (set +x; test -z "`(eval $as_var=C; export $as_var) 2>&1`"); then
    eval $as_var=C; export $as_var
  else
    $as_unset $as_var
  fi
done

# Assume that maude is installed, except indicated otherwise.
MAUDE=@MAUDE@

# Choose a default creol compiler.  User may override on the CLI.
creolc=creolc.opt

# Command line arguments.
for option
do
  # If the previous option needs an argument, assign it.
  if test -n "$creolshell_prev" ; then
    eval "$creolshell_prev=\$option"
    creolshell_prev=
    continue
  fi

  optarg=`expr "x$option" : 'x[^=]*=\(.*\)'`

  case $option in
  -creolc) creolshell_prev=creolc ;;
  -creolc=*) creolc=$optarg ;;
  -maude) creolshell_prev=maude ;;
  -maude=*) maude=$optarg ;;
  -version | -V) version=yes ;;
  -verbose) verbose=yes ;;
  -verbose=*) verbose=$optarg ;;
  -keep-output) keep_output=yes ;;
  -keep-output=*) keep_output=$optarg ;;
  --help) help=yes ;;
  --help=*) help=$optarg ;;
  # Maude options
  -no-prelude | -batch | -interactive) ;;
  -prelude | -no-banner | -no-advise | -no-mixfix | -no-wrap | \
  -ansi-color | -no-ansi-color | -tecla | -no-tecla | \
  -random-seed=* | -xml-log=*) maude_flags="$maude_flags \"$option\"" ;;

  # creolc options
  -target) creolshell_prev=creolc_target ;;
  -target=*) creolc_target=$optarg ;;
  -o) creolshell_prev=creolc_output ;;
  -o=*) creolc_output=$optarg ;;

  -red-init) ;; # Drop it, because we always supply it here.

  # You can also pass environemnt variables to the script:
  *=*)
    envvar=`expr "x$option" : 'x[^=]*\)'`
    expr "x$envvar" : ".*[^_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz]" >/dev/null 2>&1 && { echo "$0: invalid environment variable name $envvar" >&2 ; { (exit 1); exit 1; }; }
    eval "$envvar='$optarg'"
    export $envvar
    ;;
  # All other options are passed to the creol compiler as inputs
  *) creolc_flags="$creolc_flags $option"
  esac
done

# Figure out where we are installed.
dir=`dirname $0`

# prefer native over bytecode.  Try some natural locations to look for the binary.
for creolc in $creolc creolc.opt ./creolc.opt ../creolc.opt $dir/creolc/creolc.opt creolc ./creolc ../creolc $dir/creolc/creolc
do
    if ( ($creolc --version > /dev/null 2>&1) || exit) ; then
	creolc=$creolc
	break
    fi
done
  
test -n "$creolc_output" || creolc_output=`mktemp creolc.XXXXXXXXXX`
test -n "$creolc_target" || creolc_target=maude

case $creolc_target in
maude | maudemc) ;;
*) echo "unknown target $creolc_target"; exit 1
esac

# After having gathered all necessary information we execute the command.
if [ "$version" = "yes" ] ; then
    # Just show the version and exit.
    echo creolshell @VERSION@, using:
    echo
    $creolc --version
    echo
    echo "Maude version `$MAUDE --version`"
else
    # Start the compiler and feed maude with its input.
    if [ "$verbose" = "yes" ] ; then
	 echo Compiling with: $creolc -red-init -o "$creolc_output $creolc_flags"
    fi
    $creolc $creolc_flags -red-init -target "$creolc_target" -o "$creolc_output" || exit 1

    # Launching maude.
    if [ "$verbose" = "yes" ] ; then
	 echo "Executing maude as : $MAUDE -interactive $MAUDE_FLAGS $creolc_output"
    fi
    $MAUDE -interactive $MAUDE_FLAGS $creolc_output

    # Cleaning up
    echo
fi

if [ "$keep_output" = "yes" ] ; then
    if [ "$verbose" = "yes" ] ; then
        echo "Compiler output left in $creolc_output"
    fi
else
    if [ "$verbose" = "yes" ] ; then
	echo "Deleting $creolc_output"
    fi
    rm -f "$creolc_output"
fi
