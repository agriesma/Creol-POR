/*
 * PetersonLeader.creol -- LeaderElection inspired by Peterson.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface Process
begin
with Process
  op get(in u: Int)
  op advancePhase
  op becomeRelay
end

class Process(i: Nat, p: Init) contracts Process
begin

  var mode: Bool // true is active, false is relay
  var status: Int // 0 && null is unknown, 1 is chosen, 2 is reported
  var uid1: Int
  var uid2: Int
  var uid3: Int
  var neighbor: Process

  with Process
    op get(in u: Int) ==
      if mode then
        if uid2 = null then
          uid2 := u;
	  !neighbor.get(uid2)
        else
	  if uid3 = null then
	    uid3 := u
	  else
	    await false
	  end
        end
      else // The process is only acting as a relay
        !neighbor.get(u)
      end

    op becomeRelay ==
      await mode && uid3 /= null && (uid2 <= uid1 || uid2 <= uid3);
       mode := false

    op advancePhase ==
      await mode && uid3 /= null && (uid1 < uid2 && uid3 < uid2);
      uid1, uid2, uid3:= uid2, null, null;
      !neighbor.get(uid1)

end
