interface Phil
begin
  with Phil
  op borrowStick
  op returnStick
end

interface Butler
begin
  with Phil op getNeighbor(out neighbor: Phil)
end

class Philosopher(butler: Butler) contracts Phil 
begin 
  var hungry: Bool
  var chopstick: Bool
  var neighbor: Phil
 
  op init ==
    chopstick@Philosopher := true;
    hungry@Philosopher := false;
    butler@Philosopher.getNeighbor(; neighbor@Philosopher)
 
  op run == !think() ||| !eat()

  op eat ==
    await hungry@Philosopher;
    await neighbor@Philosopher.borrowStick(;);
    await chopstick@Philosopher;
    hungry@Philosopher := false;
    !neighbor@Philosopher.returnStick();
    !eat()

  op think ==
    await ~ hungry@Philosopher;
    release;
    hungry@Philosopher := true;
    !think()

  with Phil 
    op borrowStick ==
      await chopstick@Philosopher;
      chopstick@Philosopher := false

    op returnStick ==
      chopstick@Philosopher := true

end

class Butler implements Butler
begin
  var p1: Phil
  var p2: Phil
  var p3: Phil
  var p4: Phil
  var p5: Phil

  op init ==
    skip

  op run ==
    p1@Butler := new Philosopher(this);
    p2@Butler := new Philosopher(this);
    p3@Butler := new Philosopher(this);
    p4@Butler := new Philosopher(this);
    p5@Butler := new Philosopher(this)

  with Phil
    op getNeighbor(out neighbor: Phil) ==
      if caller = p1@Butler then
        neighbor := p2@Butler
      else
        if caller = p2@Butler then
          neighbor := p3@Butler
        else
          if caller = p3@Butler then
            neighbor := p4@Butler
          else
            if caller = p4@Butler then
              neighbor := p5@Butler
            else
              neighbor := p1@Butler
            end
          end
        end
      end

end

