/*
 * AsyncLCR.creol
 *
 * Simple solution to the asynchronous leader-election protocol.
 */

interface Process
begin
  with Process
    op receive (in v: Int)
end

class Process(i: Init, u: Int)
contracts Process
begin
  // unknown = 0 || null
  // chosen = 1
  // reported = 2
  var status: Int
  var neighbor: Process

  op init == status := 0; i.getNeighbor(; neighbor); !neighbor.receive(u)

  op run == skip

  with Process
    op receive(in v: Int) ==
	if v > u
	then !neighbor.receive(v)
	else if v = u
	     then status := 1 end end
end

interface Init
begin
  with Process
    op getNeighbor(out p: Process)
end

class Init
contracts Init
begin
  var p1 : Process
  var p2 : Process
  var p3 : Process

  op init == p1 := new Process(this, 1); p2 := new Process(this, 2);
    p3 := new Process(this, 3)

  with Process
    op getNeighbor(out p: Process) ==
      if caller = p1 then p := p3 else
      if caller = p2 then p := p1 else p := p2 end end

end
