/*
 * 
 */
interface ToClient
begin
  with Any
    op availFiles
    op reqFiles
end

interface ToServer
begin
  with ToServer
    op enquire
    op getLength
    op getPack
end

interface Peer
  inherits ToClient, ToServer
begin
end

interface DB
begin
  with ToServer
    op getFile(in fId: String; out file: List[List[Data]])
    op getLength(in fId: String; out length: Nat)
    op storeFile(in fId: String, file: List[Data])
    op listFiles(out fList: List[String])
end

class Node(db: DB)
  contracts Peer, ToServer
begin
  with ToServer
    op enquire(out files: List[String]) ==
      await db.listFiles(; files)
    op getLength(in fId: String; out lth: Nat) ==
      await db.getLength(fId; lth)
    op getPack(in fId: String, pNbr: Int; out pack: List[Data]) ==
      var f: List[List[Data]];
      await db.getFile(fId; f);
      pack := at(f, pNbr)
  with Any
    op availFiles (in sList: List[ToServer];
		   out files: List[[ToServer , List[Str]]]) ==
      if (sList = nil) then files := nil
      else
        l1!hd(sList).enquire();
        l2!self.availFiles(tail(sList));
	await l1 && l2;
	l1?(fList);
	l2?(files)
      end

    op reqFile(in sId: ToServer, fId: String) ==
      var file: List[Data];
      var pack: List[Data];
      var lth: Nat;
      await sId.getLength(fId, lth; pack);
      while (lth > 0) do
	await sId.getPack(fId, lth; pack);
	file := append(pack, file);
	lth := lth - 1
      end;
      !db.storeFile(fId, file)
end

