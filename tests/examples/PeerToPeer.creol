/*
 * 
 */
interface Client
begin
  with Any
    op availFiles (in sList: List[Server];
		   out files: List[[Server , List[Str]]])
    op reqFiles
end

interface Server
begin
  with Server
    op enquire
    op getLength(in fId: String; out lth: Int)
    op getPack(in fId: String, pNbr: Int; out pack: Data)
end

interface Peer
  inherits Client, Server
begin
end

interface DB
begin
  with Server
    op getFile(in fId: String; out file: List[List[Data]])
    op getLength(in fId: String; out length: Int)
    op storeFile(in fId: String, file: List[Data])
    op listFiles(out fList: List[String])
end

class Node(db: DB)
  contracts Peer, Server
begin
  with Server
    op enquire(out files: List[String]) ==
      await db.listFiles(; files)
    op getLength(in fId: String; out lth: Int) ==
      await db.getLength(fId; lth)
    op getPack(in fId: String, pNbr: Int; out pack: Data) ==
      var f: List[List[Data]];
      await db.getFile(fId; f);
      pack := at(f, pNbr)

  with Any
    op availFiles (in sList: List[Server];
		   out files: List[[Server , List[Str]]]) ==
      var l1: Label[ ] ;
      var l2: Label[List[[Server, List[Str]]]] ;
      if (sList = nil) then files := nil
      else
        l1!head(sList).enquire();
        l2!(this as Client).availFiles(tail(sList));
	await l1? && l2?;
	l1?();
	l2?(files)
      end

    op reqFile(in sId: Server, fId: String) ==
      var file: List[Data];
      var pack: Data;
      var lth: Int;
      await sId.getLength(fId; lth);
      while (lth > 0) do
	await sId.getPack(fId, lth; pack);
	file := pack -| file;
	lth := lth - 1
      end;
      !db.storeFile(fId, file)
end

