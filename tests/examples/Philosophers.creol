/*
 * Philosophers.creol -- The dining philosophers example.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * Adapted from:
 *
 * @InProceedings{johnsen03nik,
 *   author =	 {Einar Broch Johnsen and Olaf Owe and Marte Arnestad},
 *   title =	 {Combining Active and Reactive Behavior in Concurrent
 *                Objects},
 *   editor =    {Dag Langmyhr},
 *   booktitle = {Proc. of the Norwegian Informatics Conference (NIK'03)},
 *   year =	 2003,
 *   month =	 nov,
 *   pages =     {193--204},
 *   publisher = {Tapir Academic Publisher}
 * }
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
interface Phil
begin
  with Phil
  op borrowStick
  op returnStick
end

interface Butler
begin
  with Phil op getNeighbor(out neighbor: Phil)
end

class Philosopher(butler: Butler) contracts Phil 
begin 
  var hungry: Bool
  var chopstick: Bool
  var neighbor: Phil
  var hist: String
 
  op init == hist := ""; chopstick := true; hungry := false;
    butler.getNeighbor(; neighbor)
 
  op run == !think() ; !eat() ; !digest()

  op digest == release ; hungry := true; hist := hist |- "d";
    release; !digest()

  op eat == var l: Label[ ]; await hungry; l!neighbor.borrowStick();
    await l?; await chopstick;
    hist := hist |- "e"; hungry := false; !neighbor.returnStick();
    release; !eat()

  op think == await ~ hungry; hist := hist |- "t";
    release; !think()

  with Phil 
    op borrowStick ensures ~chopstick == await chopstick; chopstick := false
    op returnStick requires ~chopstick == chopstick := true
 
end

class Butler implements Butler
begin
  var p1: Phil
  var p2: Phil
  var p3: Phil
  var p4: Phil
  var p5: Phil

  op init ==
    skip

  op run ==
    p1 := new Philosopher(this);
    p2 := new Philosopher(this);
    p3 := new Philosopher(this);
    p4 := new Philosopher(this);
    p5 := new Philosopher(this)

  with Phil
    op getNeighbor(out neighbor: Phil) ==
      if caller = p1 then neighbor := p2 else
      if caller = p2 then neighbor := p3 else
      if caller = p3 then neighbor := p4 else
      if caller = p4 then neighbor := p5 else neighbor := p1 end end end end

end

