load creol-interpreter .
mod PROGRAM is
protecting CREOL-SIMULATOR .
op classes : -> Configuration [ctor] .
eq classes =
< "Generator" : Cl | Inh: (noInh),
  Par: (noVid),
  Att: ("n" |-> null , "next" |-> null),
  Mtds: (< "init" : Mtdname | Param: noVid, Latt: "_" |-> null, Code: "next" ::= new "Sieve" ( int(2) ) ; "n" ::= int(3) ; return ( emp ) > *
    < "run" : Mtdname | Param: noVid, Latt: "label:0" |-> null , "r" |-> null , "l" |-> null , "_" |-> null, Code: "l" ! "next" . "send" ( "n" ) ; "n" ::= "+" ( "n" :: int(1) ) ; ( "label:0" ! "this" . "run" (emp ) )  ; free( "label:0" ) ; ( await ( "l" ?? ) ) ; ( "l" ? ( "r" ) )  ; return ( emp ) >),
  Ocnt: 0 >

< "Sieve" : Cl | Inh: (noInh),
  Par: ("p"),
  Att: ("p" |-> null , "next" |-> null),
  Mtds: (< "init" : Mtdname | Param: noVid, Latt: "_" |-> null, Code: skip ; return ( emp ) > *
    < "run" : Mtdname | Param: noVid, Latt: "_" |-> null, Code: skip ; return ( emp ) > *
    < "send" : Mtdname | Param: "n", Latt: "n" |-> null , "res" |-> null , "label:0" |-> null , "d" |-> null , "r" |-> null , "_" |-> null, Code: "d" ::= "/" ( "n" :: "p" ) ; "r" ::= "-" ( "n" :: "*" ( "d" :: "p" ) ) ; if "=" ( "r" :: int(0) ) th "res" ::= bool(false) el if "/=" ( "next" :: null ) th "label:0" ! "next" . "send" ( "n" ) ; ( await ( "label:0" ?? ) ) ; ( "label:0" ? ( "res" ) )  el "next" ::= new "Sieve" ( "n" ) ; "res" ::= bool(true) fi fi ; return ( "res" ) >),
  Ocnt: 0 >

.
endm
