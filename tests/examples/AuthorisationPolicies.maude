load creol-interpreter
mod PROGRAM is
pr CREOL-INTERPRETER .
op init : -> Configuration [ctor] .
eq init =
< "SAuth" : Cl | Inh: noInh, Par: noVid, Att: "gr" |-> null, Mtds: 
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ; return ( emp ) > *
  < "run" : Mtdname | Param: noVid, Latt: noSubst, Code: "gr" ::= null ; return ( emp ) > *
  < "delay" : Mtdname | Param: noVid, Latt: noSubst, Code: ( await "=" ( "gr" # null ) ) ; return ( emp ) > *
  < "grant" : Mtdname | Param: "x", Latt: "x" |-> null, Code: ( "sync.0" ! "this" . "delay" (emp ) )  ; ( "sync.0" ? ( noVid ) )  ; "gr" ::= "x" ; return ( emp ) > *
  < "revoke" : Mtdname | Param: "x", Latt: "x" |-> null, Code: if "=" ( "gr" # "x" ) th "gr" ::= null el skip fi ; return ( emp ) > *
  < "auth" : Mtdname | Param: "x", Latt: "x" |-> null, Code: ( await "=" ( "gr" # "x" ) ) ; return ( emp ) >, Ocnt: 0 >

< "MAuth" : Cl | Inh: noInh, Par: "gr", Att: "gr" |-> null , "gr" |-> null, Mtds: 
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ; return ( emp ) > *
  < "run" : Mtdname | Param: noVid, Latt: noSubst, Code: "gr" ::= null ; return ( emp ) > *
  < "delay" : Mtdname | Param: noVid, Latt: noSubst, Code: ( await "=" ( "gr" # null ) ) ; return ( emp ) > *
  < "grant" : Mtdname | Param: "x", Latt: "x" |-> null, Code: ( "sync.0" ! "this" . "delay" (emp ) )  ; ( "sync.0" ? ( noVid ) )  ; "gr" ::= "x" ; return ( emp ) > *
  < "revoke" : Mtdname | Param: "x", Latt: "x" |-> null, Code: if "=" ( "gr" # "x" ) th "gr" ::= null el skip fi ; return ( emp ) > *
  < "auth" : Mtdname | Param: "x", Latt: "x" |-> null, Code: ( await "=" ( "gr" # "x" ) ) ; return ( emp ) >, Ocnt: 0 >

< "Test" : Cl | Inh: "SAuth" < emp >  ## "DB" < emp > , Par: noVid, Att: noSubst, Mtds: 
  < "openH" : Mtdname | Param: noVid, Latt: "ok" |-> null, Code: ( "sync.0" ! "this" . "clear" ("caller" ) )  ; ( await ( "sync.0" ?? ) ) ; ( "sync.0" ? ( "ok" ) )  ; if "ok" th ( "sync.1" ! "grant" @ "Sauth" ( "caller" ) )  ; ( "sync.1" ? ( noVid ) )  el skip fi ; return ( "ok" ) > *
  < "access" : Mtdname | Param: "key", Latt: "key" |-> null , "y" |-> null, Code: ( "sync.0" ! "auth" @ "SAuth" ( "caller" ) )  ; ( "sync.0" ? ( noVid ) )  ; ( "sync.1" ! "access" @ "Test" << "DB" ( "key" # bool(true) ) )  ; ( await ( "sync.1" ?? ) ) ; ( "sync.1" ? ( "y" ) )  ; return ( "y" ) > *
  < "closeH" : Mtdname | Param: noVid, Latt: noSubst, Code: ( "sync.0" ! "this" . "revoke" ("caller" ) )  ; ( "sync.0" ? ( noVid ) )  ; return ( emp ) >, Ocnt: 0 >

< "LAuth" : Cl | Inh: "MAuth" < emp >  ## "DB" < emp > , Par: noVid, Att: noSubst, Mtds: 
  < "openL" : Mtdname | Param: noVid, Latt: noSubst, Code: ( "sync.0" ! "this" . "clear" ("caller" ) )  ; ( await ( "sync.0" ?? ) ) ; ( "sync.0" ? ( "ok" ) )  ; if "ok" th ( "sync.1" ! "grant" @ "LAuth" << "MAuth" ( "caller" ) )  ; ( "sync.1" ? ( noVid ) )  el skip fi ; return ( emp ) > *
  < "access" : Mtdname | Param: "key", Latt: "key" |-> null , "y" |-> null, Code: ( "sync.0" ! "auth" @ "LAuth" << "MAuth" ( "caller" ) )  ; ( "sync.0" ? ( noVid ) )  ; ( "sync.1" ! "access" @ "DB" ( "key" # bool(false) ) )  ; ( await ( "sync.1" ?? ) ) ; ( "sync.1" ? ( "y" ) )  ; return ( "y" ) > *
  < "closeL" : Mtdname | Param: noVid, Latt: noSubst, Code: ( "sync.0" ! "this" . "revoke" ("caller" ) )  ; ( "sync.0" ? ( noVid ) )  ; return ( emp ) >, Ocnt: 0 >

< "HLAuth" : Cl | Inh: "LAuth" < emp >  ## "HAuth" < emp > , Par: noVid, Att: noSubst, Mtds: 
  < "access" : Mtdname | Param: "key", Latt: "key" |-> null , "y" |-> null, Code: if "=" ( "caller" # ( "gr" @@ "SAuth" ) ) th ( "sync.1" ! "access2" @ "HAuth" ( "key" # "caller" ) )  ; ( "sync.1" ? ( "y" ) )  el ( "sync.0" ! "access2" @ "LAuth" ( "key" # "caller" ) )  ; ( "sync.0" ? ( "y" ) )  fi ; return ( "y" ) >, Ocnt: 0 >

< "TestAgent" : Cl | Inh: noInh, Par: "db", Att: "db" |-> null, Mtds: 
  < "run" : Mtdname | Param: noVid, Latt: "result" |-> null , "ok" |-> null, Code: "sync.0" ! "db" . "openH" ( emp ) ; ( "sync.0" ? ( "ok" ) )  ; if "ok" th "sync.1" ! "db" . "access" ( int(123) ) ; ( "sync.1" ? ( "result" ) )  ; "sync.2" ! "db" . "closeH" ( emp ) ; ( "sync.2" ? ( noVid ) )  el skip fi ; "sync.3" ! "db" . "openL" ( emp ) ; ( "sync.3" ? ( noVid ) )  ; "sync.4" ! "db" . "access" ( int(123) ) ; ( "sync.4" ? ( "result" ) )  ; "sync.5" ! "db" . "access" ( int(456) ) ; ( "sync.5" ? ( "result" ) )  ; "sync.6" ! "db" . "closeL" ( emp ) ; ( "sync.6" ? ( noVid ) )  ; return ( emp ) >, Ocnt: 0 >

< "DB" : Cl | Inh: noInh, Par: noVid, Att: noSubst, Mtds: 
  < "access" : Mtdname | Param: "key" , "b", Latt: "key" |-> null , "b" |-> null , "y" |-> null, Code: if "=" ( "key" # int(123) ) th if "b" th "y" ::= str("123 is customer Ole Hansen. Phone no: 90807060.") el "y" ::= str("123 is customer Ole Hansen.") fi el "y" ::= str("Unknown customer.") fi ; return ( "y" ) >, Ocnt: 0 >

.
endm
