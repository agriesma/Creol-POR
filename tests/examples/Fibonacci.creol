/*
 * Fibonacci.creol -- Compute Fibonacci numbers.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * Inspired by Nancy Lynch, "Distributed Systems"
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface Fibonacci
begin
  with Any
    op fibonacci(in n: Int; out f: Int)
end

class Fibonacci(n:Int) implements Fibonacci
begin
  op init == skip

  op run == var res: Int; var t: Label[Int]; t!fib(n); await t?; t?(res)

  op fib(in n:Int; out f:Int) ==
    var a:Int; var b:Int; var s: Label[Int]; var t:Label[Int];
    if n = 0 then f := 1 else
      if n = 1 then f := 1 else
  	s!fib(n - 1); t!fib(n - 2); s?(a); t?(b); f := a + b
      end
    end

with Any
  op fibonacci(in n:Int; out f:Int) == var t:Label[Int]; t!fib(n); t?(f)
end

class FibTester(n: Int)
begin
	var f: Fibonacci
	var res:Int
	op init == f := new Fibonacci(n)
	op run == f.fibonacci(n; res)
end
