interface Fibonacci
begin
  with Any
    op fibonacci(in n: Int; out f: Int)
end

class Fibonacci(n:Int)
begin
  op init == skip

  op run == var res: Int; var t: Label[Int]; t!fib(n); await t?; t?(res)

  op fib(in n:Int; out f:Int) ==
    var a:Int; var b:Int; var s: Label[Int]; var t:Label[Int];
    if n = 0 then f := 1 else
      if n = 1 then f := 1 else
  	s!fib(n - 1); t!fib(n - 2); s?(a); t?(b); f := a + b
      end
    end

with Any
  op fibonacci(in n:Int; out f:Int) == var t:Label[Int]; t!fib(n); t?(f)
end

class FibTester(f: Fibonacci, n: Int)
begin
	op init == skip
	op run ==
	 	var res:Int;
 		f.fibonacci(n; res)
end
