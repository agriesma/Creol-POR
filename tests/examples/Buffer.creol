/*
 * SingleCellBuffer.creol -- Dynamic buffer example.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Jasmin Christian Blanchette
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface WritableBuffer begin with Any op put(in x: Int) end

interface ReadableBuffer begin with Any op get(out x: Int) end

interface Buffer inherits WritableBuffer, ReadableBuffer begin end

class Producer(buf: WritableBuffer)
begin
  var i: Int := 1;
  op run == buf.put(i;); i := i + 1; !run()
end

class Consumer(buf: ReadableBuffer)
begin
  var sum: Int := 0;
  op run == var j: Int; buf.get(; j); sum := sum + j; !run()
end

class Buffer implements Buffer
begin
  var value: Int
  var full: Bool
  op init == full := false
  with Any op put(in x: Int) == await ~full; value, full := x, true
  with Any op get(out x: Int) == await full; x, full := value, false
end

class Main
begin
  op run == var buf: Buffer; var prod: Any; var cons: Any;
    buf := new Buffer; prod := new Producer(buf); cons := new Consumer(buf)
end
