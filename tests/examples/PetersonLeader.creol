/*
 * PetersonLeader.creol -- LeaderElection inspired by Peterson.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface Main
begin
with Process
  op getNeighbour(out n: Process)
end

interface Process
begin
with Process
  op send(in u: Int)
end

class Process(i: Int, main: Main) contracts Process
begin
  var neighbour: Process
  var mode: Bool := true // true is active, false is relay
  var status: Int := 0   // 0 is unknown, 1 is chosen, 2 is reported
  var uid1: Int := i
  var uid2: Int
  var uid3: Int

  op init == main.getNeighbour(; neighbour); !neighbour.send(i)

  with Process op send(in u: Int) ==
    if mode then
      if uid2 = null then
        uid2 := u;
        !neighbour.send(uid2);
        if uid2 = uid1 then status := 1 end
      else
        assert uid3 = null;
        uid3 := u;
        if (uid2 > uid1 && uid2 > uid3) then
          // Advance phase
          uid1, uid2, uid3 := uid2, null, null;
          !neighbour.send(uid1)
        else
          // Become relay
          mode := false
        end
      end
    else
      // Relay
      !neighbour.send(u)
    end

end

class Main contracts Main
begin
  var p1: Process
  var p2: Process
  var p3: Process
  var p4: Process

  op init == p1 := new Process(1, this); p2 := new Process(2, this);
    p3 := new Process(3, this); p4 := new Process(4, this)

  with Process op getNeighbour(out n: Process) ==
    if caller = p1 then n := p2 else
    if caller = p2 then n := p3 else
    if caller = p3 then n := p4 else
    if caller = p4 then n := p1 end end end end
end
