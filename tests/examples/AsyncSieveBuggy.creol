/*
 * AsyncSieveBuggy.creol -- The asynchronous sieve example.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * Inspired by Nancy Lynch, "Distributed Systems"
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This version is a naive transformation of the synchronous example to
 * communicate asynchronously.  However, it has an error, since it does
 * not take the unorderedness of the communication into account.
 */

interface Sieve
begin
with Any
  op send(in x: Int; out r: Bool)
end

class Generator
begin
  var n: Int
  var next: Sieve
  op init == next := new Sieve(2); n := 3
  op run == var r: Bool; var l: Label[Bool]; l!next.send(n); n := n + 1;
    !run(); await l?; l?(r)
end

class Sieve(p: Int) implements Sieve
begin
  var next: Sieve
  op init == skip
  op run == skip
  with Any
    op send(in n: Int; out res: Bool) ==
      var d: Int := n / p, r: Int := n - d * p;
      if r = 0
      then res := false
      else
        if next /= null
          then
	   await next.send(n; res)
         else
	   next := new Sieve(n); res := true
         end
      end
end
