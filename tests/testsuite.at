dnl
dnl

dnl Execute a maude command and compare it to the expected results.
dnl First parameter is the name of the test, second parameter is the maude
dnl script to execute for the text.  Number of rewrites will be filtered.
m4_define([TEST_MAUDE], [dnl
AT_CHECK([$MAUDE -no-banner -no-advise -batch $2 dnl
  | sed -f ${abs_srcdir}/maude.sed > $1.out])
AT_CHECK([diff -adu $1.out ${abs_srcdir}/$3/$1.out])
])

dnl Test our tool chain.  Requires maude,
dnl
dnl The test works as follows:
dnl Given an argument the test will first compile a maude version of the
dnl system.  This will be compared to some expected results.
dnl Then a set of tests, defined in [name]-tests.maude are run on this
dnl model and the output of maude is again compared to some expected
dnl results.
m4_define([TEST_CREOLC], [dnl
AT_SETUP([$1])
AT_CHECK([creolc -target maude ${abs_srcdir}/$2/$1.creol -o $1.maude])
AT_CHECK([diff -aNu ${abs_srcdir}/$2/$1.maude $1.maude])
AT_DATA([test.maude],
[
set show timing off .
set show advise off .
load $1 .
$3
quit .
])
TEST_MAUDE([$1], test.maude, $2)
AT_DATA([metatest.maude],
[
set show timing off .
set show advise off .
load creol-interpreter .
load $1 .
load creol-metaexec .
$4
quit .
])
dnl Don't exec this, it takes ages.
dnl TEST_MAUDE([meta-$1], metatest.maude, $2)
AT_CLEANUP
])

m4_define([TEST_CREOLMC], [dnl
AT_SETUP([$1])
AT_CHECK([creolc -target maudemc ${abs_srcdir}/$2/$1.creol -o $1.maude])
AT_CHECK([diff -adNu ${abs_srcdir}/$2/$1.maude $1.maude])
AT_DATA([test.maude],
[
set show timing off .
set show advise off .
load $1 .
$3
quit .
])
TEST_MAUDE([$1], test.maude, [$2])
AT_DATA([metatest.maude],
[
set show timing off .
set show advise off .
load creol-interpreter .
load $1 .
load creol-metaexec .
$4
quit .
])
dnl Don't exec this, it takes ages.
dnl TEST_MAUDE([meta-$1], metatest.maude, $2)
AT_CLEANUP
])

m4_define([TEST_CREOLC_PP],[dnl
AT_CHECK([creolc -target creol -P lower -o $1-pp1.creol ${abs_srcdir}/$2/$1.creol])
AT_CHECK([creolc -target creol -P lower -o $1-pp2.creol $1-pp1.creol])
AT_CHECK([diff $1-pp1.creol $1-pp2.creol])
])

dnl test the xml export.
m4_define([TEST_CREOLC_XML],[dnl
AT_CHECK([creolc -target xml -o $1-pass1.xml ${abs_srcdir}/$2/$1.creol])
])

AT_INIT([creolc])
AT_TESTED([creolc creolc.opt])

AT_SETUP([Datatypes])
TEST_MAUDE([Datatypes], ${abs_srcdir}/Datatypes.maude, [.])
AT_CLEANUP

AT_SETUP([Signature])
TEST_MAUDE([Signature], ${abs_srcdir}/Signature.maude, [.])
AT_CLEANUP

AT_SETUP([Interpreter])
TEST_MAUDE([Interpreter], ${abs_srcdir}/Interpreter.maude, [.])
AT_CLEANUP

AT_SETUP([MetaExec])
TEST_MAUDE([MetaExec], ${abs_srcdir}/MetaExec.maude, [.])
AT_CLEANUP

AT_SETUP([ModelChecker])
TEST_MAUDE([ModelChecker], ${abs_srcdir}/ModelChecker.maude, [.])
AT_CLEANUP

AT_SETUP([PrettyPrinter])
TEST_CREOLC_PP([Inheritance], [.])
TEST_CREOLC_PP([Diamond], [.])
TEST_CREOLC_PP([MutRec], [.])
TEST_CREOLC_PP([MutRec2], [.])
TEST_CREOLC_PP([Interleave], [.])
TEST_CREOLC_PP([Alarmclock], [examples])
TEST_CREOLC_PP([AsyncLCR], [examples])
TEST_CREOLC_PP([AsyncSieveBuggy], [examples])
TEST_CREOLC_PP([AuthorisationPolicies], [examples])
TEST_CREOLC_PP([BoundedBuffer], [examples])
TEST_CREOLC_PP([Sieve], [examples])
TEST_CREOLC_PP([Fibonacci], [examples])
TEST_CREOLC_PP([PeerToPeer], [examples])
TEST_CREOLC_PP([Philosophers], [examples])
TEST_CREOLC_PP([SantaClaus], [examples])
TEST_CREOLC_PP([SingleCellBuffer], [examples])
TEST_CREOLC_PP([MC3Phil], [.])
TEST_CREOLC_PP([MC4Phil], [.])
TEST_CREOLC_PP([MC5Phil], [.])
AT_CLEANUP

AT_SETUP([XML-output])
TEST_CREOLC_XML([Inheritance], [.])
TEST_CREOLC_XML([Diamond], [.])
TEST_CREOLC_XML([MutRec], [.])
TEST_CREOLC_XML([MutRec2], [.])
TEST_CREOLC_XML([Interleave], [.])
TEST_CREOLC_XML([Alarmclock], [examples])
TEST_CREOLC_XML([AsyncLCR], [examples])
TEST_CREOLC_XML([AsyncSieveBuggy], [examples])
TEST_CREOLC_XML([AuthorisationPolicies], [examples])
TEST_CREOLC_XML([BoundedBuffer], [examples])
TEST_CREOLC_XML([Sieve], [examples])
TEST_CREOLC_XML([Fibonacci], [examples])
TEST_CREOLC_XML([PeerToPeer], [examples])
TEST_CREOLC_XML([Philosophers], [examples])
TEST_CREOLC_XML([SantaClaus], [examples])
TEST_CREOLC_XML([SingleCellBuffer], [examples])
TEST_CREOLC_XML([MC3Phil], [.])
TEST_CREOLC_XML([MC4Phil], [.])
TEST_CREOLC_XML([MC5Phil], [.])
AT_CLEANUP

dnl Test the prelude.  Currently, we only try to parse and pretty-print it.
AT_SETUP([Prelude])
AT_CHECK([creolc -target creol -o prelude-pp1.creol ${top_srcdir}/share/prelude.creol])
AT_CHECK([creolc -target creol -o prelude-pp2.creol prelude-pp1.creol])
AT_CHECK([diff prelude-pp1.creol prelude-pp2.creol])
AT_CHECK([creolc -target xml -o prelude-pass1.xml ${top_srcdir}/share/prelude.creol])
AT_CLEANUP

TEST_CREOLC([Inheritance], [.], [dnl
red init .
rew init main("B", int(1)) .
],[dnl
red simulate('PROGRAM, upTerm(init main("B", int(1))), 0, 1) .
])

TEST_CREOLC([Diamond], [.], [dnl
red init .
rew init main("D", emp) .
],[dnl
red simulate('PROGRAM, upTerm(init main("D", emp)), 0, 1) .
])

TEST_CREOLC([Deadlock], [.], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Butler", emp)), 0, 1) .
])

TEST_CREOLC([MutRec], [.], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Test", emp)), 0, 1) .
])

TEST_CREOLC([MutRec2], [.], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Test", emp)), 0, 1) .
])

TEST_CREOLC([Interleave], [.], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Test", emp)), 0, 1) .
])

dnl This set of tests is testing our existing programs.
dnl

TEST_CREOLC([Alarmclock], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Alarmclock", emp)), 0, 1) .
])

dnl AuthorisationPolicies currently fails to run in Maude.  We must reconsider
dnl the binding strategy for the interpreter.
dnl TEST_CREOLC([AuthorisationPolicies], [examples], [dnl
dnl red init .
dnl ],[
dnl red simulate('PROGRAM, upTerm(init main("Init", emp)), 0, 1) .
dnl ])

TEST_CREOLC([AsyncLCR], [examples], [dnl
red init .
rew init main("Init", emp) .
],[
red simulate('PROGRAM, upTerm(init main("Init", emp)), 0, 1) .
])

TEST_CREOLC([Sieve], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Generator", emp)), 0, 1) .
])

TEST_CREOLC([AsyncSieveBuggy], [examples], [dnl
red init .

*** Shows the bug.
***
*** This test needs about 70 seconds and about 410 MiB memory.
*** Therefore, it is disabled at the user installation.
***
*** The model checker will find the bug in a second.
***
*** search [[1, 62]] in PROGRAM : init main("Generator", emp) =>+
***  < O:Oid : "Sieve" | Att: A:Subst, "p" |-> int(9), Pr:
***                      L:Subst, SL:StmList, PrQ: W:MProc, Lcnt: N:Nat >
***  conf:Configuration .
],[dnl
red simulate('PROGRAM, upTerm(init main("Generator", emp)), 0, 1) .
])

TEST_CREOLC([Philosophers], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Butler", emp)), 0, 1) .
])

TEST_CREOLC([SingleCellBuffer], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Main", emp)), 0, 1) .
])

TEST_CREOLC([BoundedBuffer], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Starter", emp)), 0, 1) .
])

TEST_CREOLC([Fibonacci], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Fibonacci", int(6))), 0, 1) .
])

TEST_CREOLC([SantaClaus], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Christmas", emp)), 0, 1) .
])

TEST_CREOLC([PeerToPeer], [examples], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Christmas", emp)), 0, 1) .
])

TEST_CREOLMC([MC3Phil], [.], [dnl
red init .
],[dnl
red simulate('PROGRAM, upTerm(init main("Butler", emp)), 0, 1) .
])
