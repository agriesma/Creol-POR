dnl
dnl

dnl Execute a maude command and compare it to the expected results.
dnl First parameter is the name of the test, second parameter is the maude
dnl script to execute for the text.  Number of rewrites will be filtered.
m4_define([TEST_MAUDE], [dnl
AT_CHECK([$MAUDE -no-banner -no-advise -batch $2 dnl
  | egrep -v '^rewrites: [[[:digit:]]]+' > $1.out])
AT_CHECK([diff $1.out ${abs_srcdir}/$1.expected])
])

dnl Test our tool chain.  Requires maude,
dnl
dnl The test works as follows:
dnl Given an argument the test will first compile a maude version of the
dnl system.  This will be compared to some expected results.
dnl Then a set of tests, defined in [name]-tests.maude are run on this
dnl model and the output of maude is again compared to some expected
dnl results.
m4_define([TEST_CREOLC], [dnl
AT_SETUP([$1])
AT_CHECK([creolc ${abs_srcdir}/$1.creol -o $1.maude])
AT_CHECK([diff ${abs_srcdir}/$1.maude $1.maude])
AT_DATA([test.maude],
[
set show timing off .
set show advise off .
load $1 .
$2
quit .
])
TEST_MAUDE([$1], test.maude)
AT_CLEANUP
])

AT_INIT([creolc])
AT_TESTED([creolc creolc.opt])

AT_SETUP([Datatypes])
TEST_MAUDE([Datatypes], ${abs_srcdir}/Datatypes.maude)
AT_CLEANUP

AT_SETUP([Signature])
TEST_MAUDE([Signature], ${abs_srcdir}/Signature.maude)
AT_CLEANUP

AT_SETUP([Interpreter])
TEST_MAUDE([Interpreter], ${abs_srcdir}/Interpreter.maude)
AT_CLEANUP

AT_SETUP([ModelChecker])
TEST_MAUDE([ModelChecker], ${abs_srcdir}/ModelChecker.maude)
AT_CLEANUP

TEST_CREOLC([Alarmclock], [dnl
red init .
])

TEST_CREOLC([AsyncLCR], [dnl
red init .
rew init main('Init, emp) .
])

TEST_CREOLC([Sieve], [dnl
red init .
])

TEST_CREOLC([Philosophers], [dnl
red init .
])

TEST_CREOLC([SingleCellBuffer], [dnl
red init .
])

TEST_CREOLC([BoundedBuffer], [dnl
red init .
])

TEST_CREOLC([Fibonacci], [dnl
red init .
])

TEST_CREOLC([SantaClaus], [dnl
red init .
])
