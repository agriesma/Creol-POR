/*
 * FirstOrder.creol -- Demonstrate free in connection with first-order
 *  futures and true modelling.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface I
begin
  with J op m(out x: Int)
end

interface J
begin
  with Any op m(in is: List[I]; out rs: List[Int])
end

class C
contracts J
begin
  with Any op m(in is: List[I]; out rs: List[Int]) ==
    var l: Label[Int] ;
    var lt: List[Label[Int]];
    var it: List[Label[I]];
    var i: I;
    var r: Int;

    it, lt, rs := is, nil, nil;
    while (it /= nil) do
      i, it := head(it), tail(it);
      l!i.m();
      lt := lt |- l
    end;
    release;  /* actually: await forall x in lt: x? */
    while (lt /= nil) do
      l, lt := head(lt), tail(lt);
      l?(r);
      rs := rs |- r
    end
end
