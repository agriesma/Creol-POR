/*
 * bankexp.creol
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2009 by Ingrid Chieh Yu de Vibe
 *   <ingridcy@ifi.uio.no>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface Account
begin
  with Any
   // op increaseBalance(in s:Int)
    op balance(out b: Int)
    op deposit(in sum: Int)
end


class BankAccount implements Account 
 begin

   var bal: Int := 0;
   op increaseBalance (in sum : Int) == bal := bal + sum
   

   with Any
   op balance (out b : Int)==  b := bal
   op deposit(in sum : Int) == !increaseBalance(sum)
 end


// new class Log implements Log
//  begin

//    var history : String;
//    op log(in message : String) == history := history|-| message; 
 
//  end


// update BankAccount 
//  begin
  
//    var logger : Log

//    with Any

//    op transaction(in sum: Int, s : String) ==  bal:= bal + sum; logger.log(s)

//  end




// update BankAccount
//  begin

//    with Any

//    op transfer(in sum : Int, acc : Account) ==  await sum <= bal; 
//                                           this.transaction(-sum, "transfer amount" |-| String_of_Int(sum)); 
//                                           acc.deposit(sum) 

//    op withdraw(in sum : Int) == await sum <= bal;
//                           this.transaction(-sum, "withdraw amount" |-| String_of_Int(sum)) 

//    op deposit(in sum : Int) == !this.transaction(sum, "deposit amount" |-| String_ofInt(sum) )

//  end





// simplify BankAccount 
//  begin
//    op increaseBalance (in sum : Int)
//  end




// new class BusinessAccount inherits BankAccount contracts Account
// begin
//    var credit : Int
//    var creditlim : Int 

//    op withdraw(in sum : Int) ==  if ((bal < sum) && ((credit + sum) <= creditlim)) then credit := sum + credit else withdraw@BankAccount(sum) fi;

//    op investments(in investIn:String) == skip;
  
//   op 
// end
