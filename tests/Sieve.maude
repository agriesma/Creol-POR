load interpreter
mod PROGRAM is
pr INTERPRETER .
op init : -> Configuration [ctor] .
eq init =
< 'Generator : Cl | Inh: noInh, Par: noAid, Att: "n" |-> null , "next" |-> null, Mtds: 
  < 'init : Mtdname | Param: noAid, Latt: noSubst, Code: "next" ::= new 'Sieve( int(2) ) ; "n" ::= int(3) ; return ( emp ) > *
  < 'run : Mtdname | Param: noAid, Latt: "r" |-> null, Code: "next" . 'send( "n" : "r" ) ; "n" ::= "plus" ( "n" # int(1) ) ; "Dummy" ! "this" . 'run ( emp ) ; return ( emp ) >, Ocnt: 0 >

< 'Sieve : Cl | Inh: noInh, Par: "p", Att: "p" |-> null , "next" |-> null, Mtds: 
  < 'init : Mtdname | Param: noAid, Latt: noSubst, Code: skip ; return ( emp ) > *
  < 'run : Mtdname | Param: noAid, Latt: noSubst, Code: skip ; return ( emp ) > *
  < 'send : Mtdname | Param: "n", Latt: "n" |-> null , "res" |-> null , "d" |-> null , "r" |-> null, Code: "d" ::= "div" ( "n" # "p" ) ; "r" ::= "minus" ( "n" # "times" ( "d" # "p" ) ) ; if "equal" ( "r" # int(0) ) th "res" ::= bool(false) el if "not" ( "equal" ( "next" # null ) ) th "next" . 'send( "n" : "res" ) el "next" ::= new 'Sieve( "n" ) ; "res" ::= bool(true) fi fi ; return ( "res" ) >, Ocnt: 0 >

.
endm
