interface Phil
begin
  op borrowStick
  op returnStick
end

interface Butler
begin
  with Phil op getNeighbor(out neighbor: Phil)
end

class Philosopher(butler: Butler) implements Phil 
begin 
  var hungry: Bool
  var chopstick: Bool
  var neighbor: Phil
  var history: String
 
  op init == history := ""; chopstick := true; hungry := false;
    butler.getNeighbor(; neighbor);
 
  op run == !think(); ||| !eat(); ||| !digest(); 

  op digest == await wait ; hungry := true; history := plus(history, "d");
    await wait; !digest();

  op eat == await hungry; l!neighbor.borrowStick(); await l?; await chopstick;
    history := plus(history, "e"); hungry := false; !neighbor.returnStick();
    await wait; !eat();

  op think == await not hungry; history := plus(history, "t");
    await wait; !think();

  with Phil 
    op borrowStick == await chopstick; chopstick := false;
    op returnStick == chopstick := true;
 
end

class Butler implements Butler
begin
  var p1: Phil
  var p2: Phil
  var p3: Phil
  var p4: Phil
  var p5: Phil

  op init ==
    skip;

  op run ==
    p1 := new Philosopher(this);
    p2 := new Philosopher(this);
    p3 := new Philosopher(this);
    p4 := new Philosopher(this);
    p5 := new Philosopher(this);

  with Phil
    op getNeighbor(out neighbor: Phil) ==
      if caller = p1 then neighbor := p2; else
      if caller = p2 then neighbor := p3; else
      if caller = p3 then neighbor := p4; else
      if caller = p4 then neighbor := p5; else neighbor := p1; fi fi fi fi

end

