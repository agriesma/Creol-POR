@node FAQ
@chapter Frequently Asked Questions


In this chapter we collect the frequently asked questions and their
answers,


@section The Compilers @command{creolc} and @command{creolc.opt}

Q: What is @command{creolc} and what is @command{creolc.opt}

A: OCaml can compile a program both to @emph{bytecode} and to
@emph{native code}.  The bytecode version is called @command{creolc}.
The native version is called @command{creolc.opt}.  It is common to use
the suffix @code{.opt} for natively built OCaml binaries.  We compile
and install both versions.  If you want to debug an OCaml program you
have to use the bytecode binary.

Notice, that the RPM will only install the native version under the name
@command{creolc}.


Q: @command{creolc} fails to work after upgrading ocaml.

A: Versions of libraries are not compatible between different versions of
OCaml.  It is therefore necessary to recompile and reinstall all libraries
on which creolc is depending and to recompile creolc after these steps,
if you change your version of ocaml.

Alternatively, you can use @command{creolc.opt}.


Q: @command{creolc} fails to work after upgrading my Linux distribution.

A: Sometimes a distribution upgrade will also upgrade the version of
ocaml.  Sometimes the upgrade will also overwrite configuration files of
ocamlfind or ocaml, such that @command{creolc} fails to work.  Such
upgrades often affect @command{creolc.opt}, too.

You should uninstall all dependend libraries which are not provided by
the distribution before you upgrade the Linux distribution, upgrade the
distribution, and then recompile and reinstall the depended libraries.
After this, you have to recompile and reinstall @command{creolc}.
