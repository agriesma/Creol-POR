@node Creol Tutorial
@chapter A Tutorial Introduction to Creol

This chapter is intended to be an introduction into the concepts of
the Creol language by giving examples.

@menu
* First Creol Program::         A first Creol program.
* Sieve of Erathostenes::       Computing prime numbers.
* Self Calls::                  How to call methods of one-self.
* Inheritance::                 Inheritance and Interfaces
@end menu


@node First Creol Program
@section A First Creol Program

Usually, the first program presented in tutorials on programming
languages is a program that outputs ``hello, world''.  Creol does not
have a notion of output or console, because it is a language for
describing @emph{distributed systems} using objet-oriented
techniques.

A distribtuted system collects many computing resources into one
system to solve common tasks.  This is often done to increase the
computational power of the system (especially, if the task at hand is
easy to parallelise).  But very often, the subsystems of a distributed
system offer specialised facilities which are not shared by other
subsystems.  However, building distributed systems is hard, since all
parts work independently but still have to cooperate.  Leslie Lamport
characterises a distributed system by: ``A distributed system is one
in which the failure of a computer you didn't even know existed can
render your own computer unusable'' (@pxref{Lamport (1987)}).

Conceptually, each object of a Creol system executes on its own
virtual processor and owns its own private ressources.  The object is
active and has its own thread of execution, where its activity starts
immediately after the object has been created and initialised.  It is
responsible for its own scheduling.  Other objects have very little
control on how an object is coordinating its activities.  It has
private access to its data.  All communication between objects is only
by message passing.  Object can neither read nor write attributes
which belong to another object.

Objects may receive messages, which results in the creation of an
activity which handles the reaction to that message.  At any time at
most one activity is active in an object.  Different activities are
coordinated cooperatively:  An activity has to explicitely yield to
other activities.

Creol does not provide any output functions.  We still want to show a
simple ``hello, world'' example.  We do so with two objects.  One
object will send a ``hello, world'' message and the other object will
receive it.  As in other object-oriented programming languages,
classes are a structuring mechanism that collects attribute
declarations and the code for methods.  Objects are instances of one
class, but classes can inherit code from other classes
(@pxref{Inheritance}).

In contrast to other object-oriented programming languages, where
classes are also types of objects, objects in Creol are typed by
interfaces only.  The interface describes what methods are available
to other objects.  Additionally, one can specify @emph{co-interfaces}.
A method is only available to objects which are typed by the
co-interface.

Below, objects of type @code{Hello} export a method @code{hello} to
all objects which are an instance of @code{Any}.  The interface
@code{Any} is the implicit supertype of all objects.  No methods are
specified in @code{Any}.

Classes provide implementation for objects.  The class @code{Hello}
implements the interface @code{Hello} and provides an implementation
to the @code{hello} method.

The class @code{Main} does not declare to implement any interface, but
all classes implicitely implement the @code{Any} interface.  Each
instance of @code{Main} will create an instance of @code{Hello} during
initialisation in the @code{init} method and will as its only activity
call the method @code{hello} of that instance and store the result
value in the attribute @code{result}.

@example
interface Hello
begin
  with Any op hello(out result: String)
end

class Hello implements Hello
begin
  with Any op hello(out result: String) == result := "Hello, world"
end

class Main
begin
  var result: String
  var hello: Hello
  op init == hello := new Hello
  op run == hello.hello(; result)
end
@end example

In order to execute this program, it has first be compiled to a
version suitable for execution.  One possibility would be to compile
the program into the @emph{Maude format}, which is currently the main
execution and analysis environment for Creol.  This can be achieved by
storing the example program into a file @file{Hello.creol} and then
executing the command @command{creolc -o Hello.maude Hello.creol}.
This results in the Maude model of the following example:

@example
load creol-interpreter
mod PROGRAM is
protecting CREOL-SIMULATOR .
op init : -> Configuration [ctor] .
eq init =
< "Hello" : Cl | Inh: noInh, Par: noVid, Att: noSubst, Mtds: 
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ;
    return ( emp ) > *
  < "run" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ;
    return ( emp ) > *
  < "hello" : Mtdname | Param: noVid, Latt: "result" |-> null, Code:
    "result" ::= str("Hello, world") ; return ( "result" ) >, Ocnt: 0 >

< "Main" : Cl | Inh: noInh, Par: noVid, Att: "result" |-> null ,
  "hello" |-> null, Mtds: 
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code:
    "hello" ::= new "Hello" ( emp ) ; return ( emp ) > *
  < "run" : Mtdname | Param: noVid, Latt: "label:0" |-> null, Code:
    "label:0" ! "hello" . "hello" ( emp ) ; ( "label:0" ? ( "result" ) ) ;
    return ( emp ) >, Ocnt: 0 >

.
endm
@end example

As one can see, the differences from the source program to the
representation in Maude is not too significant.  Most notably,
information on how instances of a class are to be constructed,
replacement of statements by counterparts on the lower level, and
adding auxiluary statements to mark the end of a method are
introduced. This example may be executed in Maude, as shown in the
following session:

@example
$ maude Hello.maude
                     \||||||||||||||||||/
                   --- Welcome to Maude ---
                     /||||||||||||||||||\
            Maude 2.3 built: Feb 14 2007 17:53:50
            Copyright 1997-2007 SRI International
                   Mon Nov  5 11:37:32 2007
Maude> rew init main("Main", emp) .
rewrite in PROGRAM : init
main("Main", emp) .
rewrites: 225 in 3ms cpu (3ms real) (75000 rewrites/second)
result Configuration:
< ob("Hello0") : Qu | Size: 10, Dealloc: noDealloc, Ev: noMsg >

< ob("Main0") : Qu | Size: 10, Dealloc: noDealloc, Ev: noMsg >

< ob("main") : Qu | Size: 1, Dealloc: noDealloc, Ev: noMsg >

< "Hello" : Cl | Inh: noInh, Par: noVid, Att: noSubst, Mtds:
  < "hello" : Mtdname | Param: noVid, Latt: "result" |-> null, Code:
    "result" ::= str("Hello, world") ; return("result") > *
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ;
    return(emp) >
    *
  < "run" : Mtdname | Param: noVid, Latt: noSubst, Code: skip ;
    return(emp) >,
  Ocnt: 1 >

< "Main" : Cl | Inh: noInh, Par: noVid, Att: "hello" |-> null, "result" |->
    null, Mtds:
  < "init" : Mtdname | Param: noVid, Latt: noSubst, Code: "hello" ::= new
    "Hello"(emp) ; return(emp) > *
  < "run" : Mtdname | Param: noVid, Latt: "label:0" |-> null, Code:
    "label:0" ! "hello" . "hello"(emp) ; "label:0" ?("result") ;
    return(emp) >,
  Ocnt: 1 >

< ob("Hello0") : "Hello" | Att: "this" |-> ob("Hello0"),
  Pr: idle,
  PrQ: noProc, Lcnt: 3 >

< ob("Main0") : "Main" | Att: "hello" |-> ob("Hello0"), "result" |-> str(
    "Hello, world"), "this" |-> ob("Main0"),
  Pr: idle,
  PrQ: noProc, Lcnt: 4 >

< ob("main") : "" | Att: noSubst,
  Pr: idle,
  PrQ: noProc, Lcnt: 0 >
Maude> quit .
@end example

The command @command{rew init main("Main", emp) .} instructs the Maude
interpreter to rewrite the program text @code{init} and a first object
@code{main("Main", emp)}, which is an instance of class @code{"Main"}
and which is created without class paramenters.  Maude responds with
the a term repeating the input program and a collection of queues and
objects.  We observe that all activites have terminated and that the
object @code{ob("Main0")} has stored the string @code{"Hello, world"}
in its attribute @code{"result"}.



@node Sieve of Erathostenes
@section Sieve of Erathostenes

In this section we will explain how simple programs can be written in
Creol.  We will show this using the well-known algorithm of
Erathostenes for computing prime numbers.

@menu
* A Synchronous Version::                     
* An Asynchronous Buggy Version::        
* A Correct Asynchronous Version::       
@end menu

@node A Synchronous Version
@subsection A synchronous version

We begin the description of the sieve example by giving its
@emph{synchronous implementation.}  Each system contains one instance
of class generator, which will create an instance of class
@code{Sieve} (with initial class parameter @code{2}) and send numbers
beginning with @code{3} to that instance.

Each instance of class @code{Sieve} implements the interface
@code{Sieve}.  Each instance will receive a number and check whether
it is divisible by its class parameter @code{p}.  If this is the case,
the number is known not to be a prime and @code{false} is returned.
If this is not the case it is sent to the next object in the chain for
testing, or a new object is created with this number as class
parameter and @code{true} is returned.  This way, a chain of objects
is generated, whose class parameter values @code{p} enumerate the
prime numbers.

The implementation is given below.

@example
interface Sieve
begin
with Any
  op send(in x: Int; out r: Bool)
end

class Generator
begin
  var n: Int
  var next: Sieve
  op init == next := new Sieve(2); n := 3
  op run == var r: Bool; next.send(n; r); n := n + 1; !run()
end

class Sieve(p: Int) implements Sieve
begin
  var next: Sieve

  with Any
    op send(in n: Int; out res: Bool) ==
      var d: Int := n / p, r: Int := n - d * p;
      if r = 0
      then res := false
      else
        if next /= null
        then next.send(n; res)
        else next := new Sieve(n); res := true
        end
      end
end
@end example


@node An Asynchronous Buggy Version
@subsection A buggy asynchronous version

The implementation of the sieve in the previous section is synchronous
and therefore suffers delays as the chain of prime number gets longer.
Such delays can be avoided by using asynchronous communication.  An
asynchronous method call allows the calling process to continue its
computation without waiting for the result.  Only the message to the
called process is generated by that statement.  Later, the result may
be received with a different statement.  The execution of the called
method proceeds independently from the execution of the calling
process.  Two activities occur at the same time.

A method can be call asynchronously using the construct
@code{l!m(@var{i})}, where @code{@var{i}} represents the actual
arguments, @code{m} is the name of the method, @code{o} represents the
identity of the calle, and @code{l} is a @emph{handle} (often called a
@emph{future variable} and sometimes called a label) which allows to
receive the result of the code at a later time.  The handle must be
declared as a variable of type @code{Label[`a]}, where @code{`a} is a
type variable ranging over the expected return types.  After the call
has been made, the result of that label may be received later using
the statement @code{l?(@var{o})}, where @var{o} is a list of variables
used to store the result values.  These values may received at most
once.  It is an error to try to receive the values to a call twice,
resulting in deadlocks or undefined behaviour.

Below is a modified version of the example that replaces synchronous
communication with asyncrhonous communication.

@example
class Generator
begin
  var n: Int
  var next: Sieve
  op init == next := new Sieve(2); n := 3
  op run == var r: Bool; var l: Label[Bool]; l!next.send(n); n := n + 1;
    !run(); await l?; l?(r)
end

class Sieve(p: Int) implements Sieve
begin
  var next: Sieve
  op init == skip
  op run == skip
  with Any
    op send(in n: Int; out res: Bool) ==
      var d: Int := n / p, r: Int := n - d * p;
      if r = 0
      then res := false
      else
        if next /= null
          then
           await next.send(n; res)
         else
           next := new Sieve(n); res := true
         end
      end
end
@end example

One may ask whether this implementation is correct.  Unfortunately, it
is only correct, if the communication media and scheduling preserves
the order in which messsages are received and handled.  This is
@emph{not} the case for Creol.

The tools for Creol allow us to check properties of this program
automatically.  We may ask the Maude engine to search for a
computation in which @code{9} becomes a prime number.  Below we see a
search statement, where the parameters @code{[1, 75]} state to search
for only one solution and to abort the search after @code{75} rewrite
steps.@footnote{The depth of @code{75} is the depth of the first
example Maude finds and has been determined empirically.}

@example
search [1, 75] in PROGRAM : init main("Generator", emp) =>+
 < O:Oid : "Sieve" | Att: A:Subst, "p" |-> int(9), Pr:
                     L:Subst, SL:StmList, PrQ: W:MProc, Lcnt: N:Nat >
 conf:Configuration .
@end example

This command will result in a line like:

@example
Solution 1 (state 491568)
states: 491569  rewrites: 22482129 in 252276ms cpu (300662ms real) (89116
    rewrites/second)
@end example

followed by a configuration in which an instance of sieve with @c
@code{p = 9} has been created.  The computation leading to that state
can be displayed with the command @command{show path 491568 .}.  The
number to use is the number of the state in the state graph which
displays the error and is one less than the number of states.


@node A Correct Asynchronous Version
@subsection A correct asynchronous version

One way of correcting the implementation of the sieve example is by
introducing @emph{sequence numbers}.

@example
interface Sieve
begin
with Any
  op send(in x: Int, seq: Int; out r: Bool)
end

class Generator
begin
  var n: Int := 3
  var next: Sieve
  op init == next := new Sieve(2)
  op run == var r: Bool; var l: Label[Bool];
    l!next.send(n, n); n := n + 1; !run(); await l?; l?(r)
end

class Sieve(p: Int) implements Sieve
begin
  var next: Sieve
  var ins: Int := 0
  var outs: Int := 0

  with Any
    op send(in n: Int, seq: Int; out res: Bool) ==
      var l: Label[Bool];
      await seq = ins; ins := ins + 1;
      if n % p = 0
      then res := false
      else
        if next /= null
          then
           l!next.send(n, outs); outs := outs + 1; await l?; l?(res)
         else
           next := new Sieve(n); res := true
         end
      end
end
@end example

While this leads to a correct implementation, it also changes the
interface of the @code{send} method, because a new parameter
@code{seq} for the current sequence number had to be introduced.

In Creol it is very important to be aware of the non-deterministic
scheduling, and the reordering communication channels.  A later
version of the language shall include primitives for refining these
behaviours.


@node Self Calls
@section Self Calls

The co-interface mechanism of Creol interacts with calls of an object
to itself.  Within (almost) all calls an object receives, the
programmer can access the identity of the caller using the variable
@code{caller}.  The type of that variable is defined using a
@code{with}-clause.  For example, a declaration of the form @code{with
@var{A} op @var{m}} indicates that all callers of the method @var{m}
must implement the interface @var{A}.  In addition, it states that the
type of @code{caller} is @var{A}.  Within the body of @var{m}, the
programmer can call all methods of @code{caller} that are defined in
interface @code{A}.

Some methods, most prominently @code{run} and @code{init}
(@pxref{Object Activity}), do not define a co-interface, because they
are listed before the first @code{with} clause.  Such methods do not
define the variable @code{caller}, because @code{caller} does not have
a type.  As a consequence, these methods may only be called by the
object itself.

Such self calls do not mention the receiver of the message.  They
exist in two variants: @code{@var{m}(@var{i};@var{o})} (synchronous
self-call) and @code{@var{l}!@var{m}(@var{i})} (asynchronous self-call
with label @var{l}).  With these local calls, no co-interface
requirements are enforced.  Calls to the @code{caller} are illegal in
these local methods.

Synchronous internal calls have the additional property that they
maintain the standard recursion discipline.  If a method activation
that has been called internally terminates, control will return to the
method activation that made the call.

Self-calls do not impose co-interface requirements on the caller.
This makes it impossible to call methods of oneself, which require a
co-interface, since these methods may call using the @code{caller}
variable.  One can still call these methods @emph{using external}
calls: @code{await this.@var{m}(@var{i};@var{o})} and
@code{@var{l}!this.@var{m}(@var{i})}.  External self calls must be
asynchronous.

Synchronous self-calls will deadlock, since the object must release
the process.@footnote{Internal synchronous self-calls will cause the
calling process to suspend and the called method to be activated.}
If the self-call is external and asynchronous, the  calling process
will be suspended, but the call has to compete with all other calls,
allowing other calls to be served before that call.


@node Inheritance
@section Inheritance and Interfaces

Creol supports multiple inheritance.  To be more precise, Creol
supports @emph{two} notions of inheritance: one for @emph{interfaces},
since these provide behavioural specifications and serve as types, and
one for @emph{code}.  Unlike in Java or C++, both kinds of inheritance
are @emph{unrelated} and have to be specified separately.

The keyword @code{inherit} is used to inherit code from some class
@var{C}.  This means that all methods implemented in @var{C} or one of
its super-classes are now implementations for the current class,
provided that the implementation has not been @emph{overridden} by the
current class.

The keyword @code{implements} (@pxref{First Creol Program}) is used to
assign @emph{types} to objects.  Each class implements the empty
interface @code{Any}, which is also the super-interface of all other
interfaces.  Classes are not types.  Interface declarations are never
inherited.

Each method may require some co-interface, which the caller has to
satisfy.  This means that if a method requires a co-interface, all
callers must implement that interface.  This is required, because the
@code{caller} is typed by the co-interface, allowing the method to
call back.  To make sure, that a method can be used after being
inherited, an interface may be contracted using the @code{contracts}
keyword.  See @ref{Contracts} for details.  The compiler will issue an
error message if it believes that you should contract an interface.
Consider the following example:

@example
interface Foo begin with Bar op foo end

interface Bar begin with Any op bar end

interface Baz begin with Any op bar end

class Foo implements Foo
begin
  with Bar op foo == caller.bar
end

class Bar implements Bar
begin
  var foo: Foo
  op init == foo := new Foo
  with Any op bar == foo.foo
end

class Baz implements Baz inherits Bar
begin
end

class Main
begin
  var baz: Baz
  op init == baz := new Baz
  op run == baz.bar
end
@end example

This example is @emph{not} type-safe, more specifically, the call
@code{caller.bar} is not well-typed.  The trace which violates the
well-typedness rules of Creol is the following one:
@enumerate
@item
Create an instance of @code{Main}, which will create one instance of
@code{Baz} during the initialization.  In the run method, we can the
@code{bar} method of @code{baz}.  This call is well-typed, since all
instances of @code{Baz} implement the @code{Baz} interface which
exports this method to all objects.

@item
In the @code{bar} method, which the class @code{Baz} inherits from
@code{Bar}, we call the method @code{foo} of @code{Bar}'s @code{foo}
object.

@item
In the @code{foo} method, we call the @code{bar} method of the
@code{caller}.  In this method, the caller is believed to be an
instance of a class implementing the @code{Bar} interface.  But the
caller is really an instance of class @code{Baz}, which does not
implement the @code{Bar} interface, causing a run-time type error.
@end enumerate

What went wrong?  Observe, that the code of the method @code{bar} in
class @code{Bar} is well-typed for classes implementing the interface
@code{Bar}.  This interface is a co-interface requirement of the
method @code{foo} in class @code{Foo}.  But the use of
@code{implements} does @emph{not} imply that future sub-classes of
@code{Bar} have the type @code{Bar} as well.  The way to correct this
error is to @code{contract Bar} in the definition of class @code{Bar}.
This will ensure, that @code{Bar} is also the type of all sub-classes
of @code{Bar}, among others @code{Baz}.


What does this mean in practise?  All classes implementing a certain
interface can substitute for each other, since interface describe the
behaviour.  Inheritance between interfaces @emph{is} behavioural
sub-typing, and instances implementing a sub-interface can substitute
for instances implementing the super-interface.

Classes, however, may reuse code from super-classes freely.  If they
decide to inherit a method, they must provide all interfaces required
by that method, which are those needed to satisfy co-interface
constraints.



@subsection Object construction

Especially when using multiple inheritance, one has to be aware how
objects are constructed.  A new object is created using a new
statement @code{o := new @var{C} (@var{args})}.

Unlike C++ and other languages with multiple inheritance, Creol merges
all attribute definitions from the same class.  If attributes are
initialised multiple times, the last definition will prevail.
Consider the following example, which will be used to explain the
creation of an instance of class @code{D}.
@example
class A(a: Int)
begin
  op m(out r: Int) == r := a
end

class B(b: Int) inherits A(b)
begin
  op init == assert a = b
  op n(out r: Int) == m(; r)
end

class C(c: Int) inherits A(c)
begin
  op init == assert a = c
  op o(out r: Int) == m(; r)
end

class D inherits B(1), C(2)
begin
  var x: Int
  var y: Int
  op run == n(; x); o(; y); assert x = 1 && y = 2
end
@end example

The instance of class @code{D} is constructed by executing the
following steps:
@enumerate
@item
An empty object is be created with some value for the ``attribute''
@code{self} and the attributes @code{x} and @code{y}, constituting the
@emph{segment} for class @code{D}.

@item
The segment for class @code{B} is created by adding an attribute
@code{b} to the object.  That attribute will be initialised with
@code{1}.

@item
The segment for class @code{A} is created by adding an attribute
@code{a} to the object, which will be initialised to @code{1}, the
value of @code{b}.

@item
The segment for class @code{C} will be created by adding an attribute
@code{c}, initialising it to @code{2}.

@item
The segment of class @code{A} is re-initialised, because class
@code{C} inherits from class @code{A}.  The attribute @code{a} is set
to @code{2}, the value of @code{b}

@item
The @code{init} method of class @code{A}, which is empty, is run.

@item
The @code{init} method of class @code{C} is run.  The assertion
@code{a = c} holds.

@item
The @code{init} method of class @code{A} is re-run.

@item
The @code{init} method of class @code{B} is run.  The assertion
@code{a = b} does @emph{not} hold, since it has been reinitialised to
@code{2} after creating a segment for class @code{C}.

@item
The @code{init} method of class @code{D}, which is empty, is run.

@end enumerate

Observe, that the actual problem is, that class @code{D} inherits from
both @code{B} and @code{C}.  Creating instances of class @code{B} or
of class @code{C} does not have these issues.

Additionally, observe the order in which the @code{init} method's are
run:  it is the reverse order in which the segments of the attributes
are initialised.  This ensures, that the class parameters are present
and initialised once the method is run.


@subsection Object Activity
@anchor{Object Activity}

After the object is created, it will continue to execute the internal
@code{run} method.  The invocation of that method is the final step of
object creation.

If the @code{run} method is not provided, a default implementation
consisting of @code{skip} is used.  After executing that statement,
the object becomes @emph{passive} and will henceforth only react to
method invocation from other objects.

As a general principle, an object may become passive at any time by
ceasing to maintain its activity.  Conversely, in order to stay
active, the object has to maintain its activity, usually by using
self-calls.

We advise to use asyncrhonous self-calls, which allows other
activities to be scheduled.  Otherwise, the object becomes
unresponsive.  Synchronous calls may be used, if the activity allows
other activities to be scheduled by using await-statements.
