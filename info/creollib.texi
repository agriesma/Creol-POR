@node Creol Prelude
@chapter Creol Prelude

The prelude of creol defines a standard library.  It contains all the
data types, functions, and classes defined for all creol programs.


@section Datatype Data

@example
datatype Data

fun = (a: Data, b: Data): Bool == extern "="
fun /= (a: Data, b: Data): Bool == extern "/="
@end example


@section Datatype Bool

@example
datatype Bool

fun ~ (a: Bool) : Bool == extern "~"
fun && (a: Bool, b: Bool): Bool == extern "&&"
fun || (a: Bool, b: Bool): Bool == extern "||"
fun => (a: Bool, b: Bool): Bool == extern "=>"
fun ^ (a: Bool, b: Bool): Bool == extern "^"
fun <=> (a: Bool, b: Bool): Bool == extern "<=>"
@end example


@section Datatype Real

@example
datatype Real

fun - (a: Real): Real == extern "-"
fun + (a: Real, b: Real): Real == extern "+"
fun - (a: Real, b: Real): Real == extern "-"
fun * (a: Real, b: Real): Real == extern "*"
fun / (a: Real, b: Real): Real == extern "/"
fun % (a: Real, b: Real): Real == extern "%"
fun ** (a: Real, b: Real): Real == extern "**"

fun < (a: Real, b: Real): Bool == extern "<"
fun <= (a: Real, b: Real): Bool == extern "<="
fun > (a: Real, b: Real): Bool == extern ">"
fun >= (a: Real, b: Real): Bool == extern ">="
@end example


@section Datatype Int

@example
datatype Int of Real

fun - (a: Int): Int == extern "-"
fun - (a: Int): Int == extern "-"
fun + (a: Int, b: Int): Int == extern "+"
fun - (a: Int, b: Int): Int == extern "-"
fun * (a: Int, b: Int): Int == extern "*"
fun / (a: Int, b: Int): Int == extern "/"
fun % (a: Int, b: Int): Int == extern "%"
fun ** (a: Int, b: Int): Int == extern "**"

fun < (a: Int, b: Int): Bool == extern "<"
fun <= (a: Int, b: Int): Bool == extern "<="
fun > (a: Int, b: Int): Bool == extern ">"
fun >= (a: Int, b: Int): Bool == extern ">="
@end example


@section Datatype String

@example
datatype String

fun |- (a: String, b: String): String == extern "|-"
fun -| (a: String, b: String): String == extern "-|"
fun |-| (a: String, b: String): String == extern "|-|"
fun # (a: String): Int == extern "#"

fun < (a: String, b: String): Bool == extern "<"
fun <= (a: String, b: String): Bool == extern "<="
fun > (a: String, b: String): Bool == extern ">"
fun >= (a: String, b: String): Bool == extern ">="
@end example


@section Datatype List

@example
datatype List[`a]

fun head(l: List[`a]): `a == extern "head"
fun tail(l: List[`a]): List[`a] == extern "tail"
fun last(l: List[`a]): `a == extern "last"
fun rest(l: List[`a]): List[`a] == extern "rest"
fun at(l: List[`a], p: Int): `a == extern "at"
fun has(l: List[`a], e: `a): Bool == extern "has"
fun remove(l: List[`a], e: `a): List[`a] == extern "remove"
fun -|(e: `a, l: List[`a]): List[`a] == extern "-|"
fun |-(l: List[`a], e: `a): List[`a] == extern "|-"
fun |-|(l: List[`a], m: List[`a]): List[`a] == extern "|-|"
fun #(l: List[`a]): Int == extern "length"
fun length(l: List[`a]): Int == extern "length"
fun isempty(l: List[`a]): Bool == extern "isempty"
@end example


@section Datatype Set

@example
datatype Set[`a]
@end example


@section Datatype Pair

@example
fun fst (a: [`a, `b]): `a == extern "fst"
fun snd (a: [`a, `b]): `b == extern "snd"
@end example


@section Datatypes Time and Duration

@example
datatype Time

fun <(a: Time, b: Time): Bool == extern "<"
fun <=(a: Time, b: Time): Bool == extern "<="
fun >=(a: Time, b: Time): Bool == extern ">="
fun >(a: Time, b: Time): Bool == extern ">"
@end example

@example
datatype Duration

fun dur(a: Real): Duration == extern "duration"
fun +(a: Time, d: Duration): Time == extern "+"
fun -(a: Time, d: Duration): Time == extern "-"
fun +(a: Duration, d: Duration): Duration == extern "+"
fun -(a: Duration, d: Duration): Duration == extern "-"
fun *(a: Duration, s: Real): Duration == extern "*"
fun *(a: Real, s: Duration): Duration == extern "*"
fun /(a: Duration, s: Real): Duration == extern "/"
fun <(a: Duration, b: Duration): Bool == extern "<"
fun <=(a: Duration, b: Duration): Bool == extern "<="
fun >=(a: Duration, b: Duration): Bool == extern ">="
fun >(a: Duration, b: Duration): Bool == extern ">"
@end example


@section Interface Any

@example
interface Any
@end example
