@node CREOL Language
@chapter @acronym{CREOL} Language

This chapter describes the concrete syntax of @acronym{CREOL} and explains the
semantics of @acronym{CREOL} in an informal manner.  The formal semantics of
@acronym{CREOL} is defined in rewriting logic and can be found in the file
@file{creol-interpreter.maude}.

As of today, the contents of this chapter is subject to change.  @acronym{CREOL}
is still an evolving language.  Incompatible changes to the language
are not excluded, but we will try hard to avoid them.  This chapter
serves as a reference.  The reader is referred to @ref{CREOL
Tutorial} for an exposition of the language and its features.

@menu
* Comments::                    Comments in @acronym{CREOL}.
* Types::                       Type specifications.
* Literals and Expression::     The functional sub-language.
* Assertions::                  The declarative assertion language.
* Statements::                  The object-oriented sub-language.
* Variable Declaration::        Declaring variables and attributes.
* Method Declaration::          Declaring and defining behaviour.
* Interface Declaration::       Types for objects.
* Class Declaration::           Implementation for types.
* Data Type Declaration::        Declaring data types.
* Parse Errors::                A note on parse errors.
@end menu



@node Comments
@section Comments

@acronym{CREOL} supports too kinds of comments, both have been inspired by C++
and Java.

The first kind begins with @code{//} and extends until the first
following line-break.

The second kind starts with @code{/*} and extends until the first
following @code{*/}.  Comments of this kind do not nest.


@node Types
@section Types

All expressions in @acronym{CREOL} are typed.  All variables and attributes must
declare a type.  A type is either a data type, where the types
@code{Int}, @code{Bool}, and @code{String} are pre-defined, a type
variable, written as @code{`@var{a}}, or a type expression.  Type
expressions can be applications, e.g., the type of a list of integers is
denoted by @code{List[Int]}, or the type of a tuple, written as @code{[
@{ @var{type} , @} ]}, e.g., @code{[Int, Int]} for a pair of integers.


@node Literals and Expression
@section Literals and Expressions

@acronym{CREOL} assumes a functional sub-language, which we describe in this
section.  The equality symbol


@subsection Literals

The Boolean literals of @acronym{CREOL} are @code{true} and @code{false}.

The integer literals match the regular expression @code{[0-9]+}.

Floating-point literals match the regular expression
@code{(0|([1-9][0-9]+)).[0-9]*([eE]-?[1-9][0-9]+)?}.

A string literal is a sequence of characters enclosed in quotes:
@code{"}.  The usual escape sequences using backslash, e.g.,
@code{\n}, @code{\"}, @code{\\}, are supported.

The empty list is represented by the literal @code{nil}.

The null-reference is represented by the literal @code{null}.

The self-reference is represented by the keyword @code{this}.

In method bodies, the identity of the caller is represented by the
keyword @code{caller}.


@subsection Variables

Variables are lower-case character-sequences, matching the regular
expression @code{[a-z][a-zA-Z0-9]}.  Variables are typed (see below).

In @acronym{CREOL}, the location of a variable name @var{v} is determined as
follows: if @var{v} refers to a variable, that is declared in the
method that contains the expression, or refers to one of the input- or
output parameters, then the name refers to a @emph{local variable},
@pxref{Method Declaration}.  Otherwise, it refers to an attribute of a
class @var{C}, @pxref{Class Attributes}.  This class is determined
with the following procedure: If the current class @var{C} defines an
@emph{attribute} or @emph{class parameter} named @var{v}, then @var{v}
refers to an attribute of class @var{C}.  Otherwise, recursively
search the super-classes in a depth-first manner, where the
super-classes defined in the @code{inherits} list are searched form
left to right, @pxref{Inherits}.


@subsection Static Attribute Access Expressions
@anchor{Static Attribute Access}

If a variable @emph{hides} an attribute, or attributes of the same
name are defined in different classes, the attribute can be accessed
statically.  An expression of the form @code{@var{v}@@@var{C}} refers
to an attribute named @var{v} defined in class @var{C} or inherited by
@var{C} (as determined above).  It is illegal to access an attribute
of a class of which the current class is @emph{not} a subclass.


@subsection Boolean Expressions

The Boolean expressions are:

@code{@var{expression} = @var{expression}} for equality.

@code{@var{expression} /= @var{expression}} for in-equality.

@code{~ @var{expression}} for negation.

@code{@var{expression} && @var{expression}} for conjunction.

@code{@var{expression} || @var{expression}} for disjunction.

@code{@var{expression} => @var{expression}} for implication.

@code{@var{expression} <=> @var{expression}} for bi-implication.

@code{@var{expression} ^ @var{expression}} for exclusive or.


@subsection Integers, Reals, and Arithmetic Expressions

Integer literals are written as strings of digits.  Integer literals
are represented as arbitrary precision numbers in the compiler.  This
means that there is no practical limitation on the size of integer
literals.  There may be limitations imposed by the back-ends, if
down-stream applications and target platforms impose range
limitations.  Consult the back-end documentation for details.

Real literals are written in the usual format, e.g., @code{0.5} or
@code{1e-2} are all valid real literals.  Real literals are
represented as fractions with arbitrary precision in the compiler.
This means that there is no piratical limitation on the size of real
literals.  There may be limitations imposed by the back-ends, if
down-stream applications and target platforms impose range and
precision limitations.  Consult the back-end documentation for
details.

The arithmetic expressions are:

@code{- @var{expression}} for negation.

@code{@var{expression} ** @var{expression}} for exponentiation.

@code{@var{expression} * @var{expression}} for multiplication.

@code{@var{expression} / @var{expression}} for division.

@code{@var{expression} % @var{expression}} for the Euclidean remainder
(modulo).

@code{@var{expression} + @var{expression}} for addition.

@code{@var{expression} - @var{expression}} for subtraction.


@subsection Strings

A string literal is written by quoting its contents in @code{"}, e.g.,
@code{"Hello, world"} is a string literal.  The internal @code{String}
type is @emph{List of characters}.  Consequently, the operations on
strings are the same as the ones on sequences (@pxref{List Syntax}).
Single-letter strings, e.g., list of length 1 are also considered to
be character literals.


@subsection Tuples

The operations on tuples are

@code{( @var{expression} , )} for tuple construction.


@subsection List
@anchor{List Syntax}

The literal @code{nil} represents the empty list.  Non-empty list
literals are written by enclosing a comma-separated list of
expressions inside of square brackets: @code{[1, 2, 3]} is the list
containing the elements @code{1}, @code{2}, and @code{3} in that
order.

The operations on sequences are:

@code{# @var{expression}} for the length of the list.

@code{@var{expression} |- @var{expression}} for appending to the right.

@code{@var{expression} -| @var{expression}} for appending to the left.

@code{@var{expression} |-| @var{expression}} for concatenation.

@code{@var{expression} \ @var{expression}} for projection.



@subsection Sets

@code{@{@}} represents the empty set.  Generally, sets can be
constructed by enumerating the elements: @code{@{ @{ @var{expression}
, @} @}}.

The operations on sets are:

@code{@var{expression} \ @var{expression}} for set-difference.

@code{@var{expression} || @var{expression}} for union.

@code{@var{expression} && @var{expression}} for intersection.

@code{@var{expression} in @var{expression}} for testing membership.

@code{@{ @var{id} : @var{expression} | @var{expression} @}}
for set aggregation:



@subsection Object Expressions and Literals

Object expressions and literals are expressions whose value is a
reference to an object.  The only literal is @code{null}, representing
the null-pointer.

The keyword @code{this} represents the self-reference and is an
expression.

The keyword @code{caller} represents the identity of the caller within
a method body.  The type of @code{caller} is the method's
co-interface.

The expression @code{@var{expression} as @var{type}} represents
re-typing of the value of @var{expression} to the type (interface)
@var{type}.  If the value of @var{expression} cannot be determined
statically, type conformance is tested during run time.


@subsection Function Application

Generally, applying a function is written as
@code{@var{f}(@var{e},@var{d},...,@var{c})}, where @var{f} is the name
of a function and @var{e},@var{d},@dots{} refers to expressions
representing the actual arguments.


@node Assertions
@section Assertion Language

In this section we describe the assertion language that is supported
by the compiler.

The core of the assertion language is the use of an auxiliary variable
@code{history} of type @code{List[Event]}, which records the messages
received by an object.  The type @code{Event} is abstract, but can be
queried using the functions described in @ref{Data Type Event}.

Each expression of type @code{Bool}, as defined in @ref{Literals and
Expression}, is an assertion.  In addition, the following three
expressions are assertions:

@example
(forall @var{v}: @var{T}: @var{expr})
(exists @var{v}: @var{T}: @var{expr})
(some @var{v}: @var{T}: @var{expr})
@end example

The first two expressions correspond to universal and existential
quantification.  The last one corresponds to @emph{Hilbert's epsilon}:
it chooses some value @var{v} that makes @var{expr} true.
Technically, terms using quantifiers can be transformed into terms
using some like this:
@example
(forall @var{v}: @var{T}: @var{expr}) = @var{expr}[v/(some @var{v}: @var{T}: ~ @var{expr})]
(exists @var{v}: @var{T}: @var{expr}) = @var{expr}[v/(some @var{v}: @var{T}: @var{expr})]
@end example

For many specifications, however, it is more convenient to use the
@code{some} expression, since it can be used as a value of type
@var{T} directly.


@node Statements
@section Statements

In this section we describe the statements of @acronym{CREOL} programs.


@subsection Assignments

A single assignment may be written as @code{@var{x} := @var{e}}, where
@var{x} is the name of an attribute or a local variable and @var{e}
is an expression.

A multiple assignment is written as
@code{@var{x},@var{y},...,@var{z} := @var{e},@var{f},...,@var{g}},
where the left hand side is a tuple of variable names and the right
hand side is a tuple of expressions.  Both tuples should have the same
length.


@subsection Object Creation

The creation of an object is written as @code{@var{v}:= new
@var{C}(@var{e},...)}.  @var{v} is the variable which will hold the
reference to the new object.  @var{C} is the name of the class of the
new object.  @var{e}, @dots{} are the arguments to the constructor.
Note that @var{C} has to implement an interface which is a subtype of
the interface type of @var{v}.

@subsection Synchronous Method Calls

A @emph{local} synchronous method call is written as
@code{@var{m}[:>@var{C}][<:@var{D}](@var{ins};@var{outs})}, where
@var{m} is the name of a method, @var{ins} is a possibly empty list
of expressions describing the actual arguments to the call and
@var{outs} is a possibly empty list of variable or attribute names
used to store the result values.

The optional clause @code{:>@var{C}} states, that the implementation
of the method @var{m} must be one which is defined in a super-class of
@var{C}.  Similarily, the optional clause @code{<:@var{D}} states,
that the implementation of @var{m} must be in a sub-class of
@var{D}.  These constructs allow to select a specific method
implementation even in the case of multiple inheritance.  Note that
@code{<:} cannot refer to a sub-class of the current class.

A @emph{remote} synchronous method call is written as
@code{@var{e}.@var{m}(@var{ins};@var{outs})}, where @var{e} is an
object expression describing the receiver, @var{m} is the name of a
method, @var{ins} is a possibly empty list of expressions describing
the actual arguments to the call and @var{outs} is a possibly empty
list of variable or attribute names used to store the result values.

If the type system expresses doubts on the interface to provide by
@code{this}, the programmer may append @code{as @var{I}} to the
statement, e.g., @code{x.m(;) as I}.  Note that this differs from
@code{x as I.m(;)}.  In the later example, the type of the
@emph{callee} @code{x} is coerced, whereas in the former case, the
type of @code{this} is coerced.


@subsection Asynchronous Method Calls

A @emph{asynchronous} method call is written as
@code{@var{l}!@var{e}.@var{m}(@var{ins})}, where @var{l} is the name
of a label, @var{m} is the name of a method, @var{ins} is a possibly
empty list of expressions describing the actual arguments to the call.

Results are received by the statement @code{@var{l}?(@var{outs})},
where @var{l} is a label name used for invoking the method, and
@var{outs} is a list of variable names used to store the result.

Observe that labels @emph{must} be declared.  @xref{Variable Declaration}.
The type of a label is given by @code{Label[ @{ @var{type} , @} ]}.  For
methods that do not return any value, the type of its label is
@code{Label[ ]}, where the space between @code{[} and @code{]} is
@emph{mandatory} (recall, that @code{[]} is composing statements and
@code{var x: Label} may be parsed as a statement).

It is not possible to define labels for any output arity.
@code{var x: Label[Data]} expresses that x is a label for methods
with @emph{exactly one output parameter}, regardless of its type, just as
@code{var x: Label[Data, Data]} expresses, that the method should have
two output parameters.

As with synchronous method calls, if the type system expresses doubts
on the interface to provide by @code{this}, the programmer may append
@code{as @var{I}} to the statement, e.g., @code{!x.m() as I}.  Note
that this differs from @code{!x as I.m()}.  In the later example, the
type of the @emph{callee} @code{x} is coerced, whereas in the former
case, the type of @code{this} is coerced.


@subsection Release Statement
@anchor{Release Statement}

The @code{release} statement represents an unconditional processor
release point.  The currently active process will be suspended, and
a next process may be selected.  Is is legal to reselect the same
process after executing a release statement.


@subsection Await Statement
@anchor{Await Statement}

The @code{await @var{c}} statement is a conditional processor release
point.  If the condition @var{c} holds when executing the statement,
the process will continue.  If the condition @var{c} does not hold,
however, the currently active process is suspended and another process
is selected.

Observe, that the await statement behaves differently in the context
of a merge statement (@pxref{Merge Statement}).


@subsection Blocks

Groups of statements are formed using braces, i.e., any statement or
compound statement inside braces @code{begin ... end} form a basic
statement.


@subsection Conditional Statement

The usual @code{if ... then ... else ... end} statement.


@subsection Loop Statements

THE INFORMATION IN THIS SECTION IS SUBJECT TO CHANGE.

@acronym{CREOL} supports a while loop, which uses the syntax @code{while @var{c}
[ inv @code{I} ] do @var{S} end}.  As usual, @code{@var{c}} is the
condition and @code{@var{S}} is the statement to execute.

In addition, @acronym{CREOL} supports also a do-while loop, which uses the
syntax @code{do @var{S} [ inv @var{I} ] while @var{c}}, where @var{c},
@var{S}, and @var{I} have the same meaning as with @code{while} loops.
Observe that the compiler will transform a do-while loop into a while
loop, which implies that it will not occur in the generated output.

A loop may be annotated by a @emph{loop invariant}, as indicated by
the optional @code{inv @code{I}} part.  The invariant is a proof
obligation which must hold at the beginning of a loop, the end of a
loop, @emph{and} every processor release-point within the loop body.
It is therefore advisable, that the loop invariant restricted to
instance variables is @emph{implied} by the class invariant.

Finally, we advice that each loop used in a program is
@emph{terminating}.  Infinite loops may prohibit class updates and
cause other undesired behaviours.


@subsection Sequential Composition

Statements can be composed sequentially using the @code{;} operator.

Note that contrary to Java and C @code{;} is a @emph{binary operator}
on statements, i.e., it is not a statement terminator.


@subsection Non-deterministic Merge
@anchor{Merge Statement}

THE NON-DETERMINISTIC MERGE STATEMENT IS CURRENTLY DISABLED.

The statement @code{S1 ||| S2} will execute both @code{S1} and
@code{S2} in a ``pseudo-interleaved'' manner.  It will check, whether
@code{S1} or @code{S2} are enabled for execution.  Of both are not
enabled for execution, e.g., because both are @code{await} statements
(@pxref{Await Statement}), the current activation will be suspended.
If one of them, say @code{S1} is enabled for execution, it will be
executed until the next release point, up to a point where only
@code{S1'} need to be executed.  Then, the system will continue
executing @code{S1' ||| S2}.

This means, that the process will @emph{not} release on an
@code{await} statement but continue executing @code{S2} if @code{S2}
is enabled for execution.  The statement @code{release},
@pxref{Release Statement}, on the other hand, leads to an immediate
release of the processor, even if it occurs as an await statement.

The non-deterministic merge statement should best be avoided, since it
may cause an exponential increase of the state space to be analysed.
It sometimes triggers exponential space requirements in the compiler.
If the compiler or the interpreter run out of memory, try to replace
non-deterministic merge statements by a sequential composition of
those statements@footnote{Maybe the compiler will be able to perform
such transformations automatically.  This may be an instance of
partial order reduction.}.


@subsection Non-deterministic Choice

The statement @code{S1 [] S2} chooses either @code{S1} or @code{S2}
for execution.

If both statements are @emph{guarded} by an @code{await} statement,
then execution is suspended, if both await statements are not enabled.
If exactly one of the await statements is enabled, then this one will
be chosen and the process will not be suspended.  If both guards are
enabled, one of the statements is chosen non-deterministically.

Observe, that @code{S1 [] S2} is semantically equivalent to @code{S2
[] S1}.  Also, the statement @code{skip; S1 [] await b; S2} is
semantically equivalent to @code{S1} if @code{b} is false.

External choice can be implemented as
@code{await b1; S1 [] await b2; S2}
and internal choice as
@code{skip; await b1; S1 [] skip; await b2; S2}.


@subsection Precedence of Statement Composition

The operators @code{;}, @code{[]}, and @code{|||} are binary operators
on statements.  All of them are @emph{left-associative}, @code{;}
binds strongest and @code{|||} binds weakest.  Braces may be omitted
in @code{@{ S; T @} [] U} but not in @code{S; @{ T [] U @}}.


@node Variable Declaration
@section Variable Declaration

All variables and attributes in @acronym{CREOL} must be declared.  A variable is
declared using the syntax
@code{var @var{name}: @var{type} [ := @var{init}]}.

The identifier @var{name} is the name of the variable, @var{type} is
the type of the variable and @var{init} is an expression used to
initialise the variable.


@node Method Declaration
@section Method Declaration

An operation definition has the form @code{op @var{name} (in
@var{ins}; out @var{outs}) requires @var{precondition} ensures
@var{postcondition} == @var{variables} @var{statement}}.  @var{ins} is
a list of variable declarations describing the @emph{input}
parameters.  @var{outs} is a list of variables describing the output
parameters.  In principle, one should only read from input parameters
and only write to output parameters.

The precondition and postcondition are optional and their meaning can
be easily defined using invariants.

The body of a method consists of local variable definitions followed
by a statement.


@node Interface Declaration
@section Interface Declarations

All objects in @acronym{CREOL} are typed by interface.

Each class is assumed to implement the empty interface @code{Any}.
This interface is the implicit super-interface of all other interfaces.

An interface may inherit from other interfaces, making an instance of
this interface also an instance of all super-interfaces.

An interface has a unique name.  It declares a @emph{co-interface},
which expresses mutual dependencies and constrains the users of this
interface:  Each caller of a method specified in an interface
@emph{must} implement its co-interface.

An interface specifies the signature of a sequence of methods.

@example
interface @var{I} [ inherits @var{@{ cid @}} ]
begin
  [ with @var{I'}
    @var{@{ method-decl @}}
    @var{@{ invariants @}} ]
end
@end example

@subsection Open Issues

With respect to interface declarations, the following ideas may be
considered:
@itemize @bullet
@item
May be we want to allow more than one co-interface declaration in an
interface?  Currently, an interface with two co-interface declarations
has to be constructed by inheriting the block with one interface.  On
the other hand, one might feel that both blocks form a unit and should
not be used separately.

@item
One might be tempted to introduce type-parametrised interfaces or
value-parametrised interfaces.  But a concrete use case is needed,
first.

@item
Why do we use @code{inherits} if the semantics of sub-interfacing is
much closer to @code{contracts}, or is it not?
@end itemize


@node Class Declaration
@section Class Declarations

A class provides the implementation of an object and defines
implementations to interfaces.

@menu
* Class Parameters::    Parameters given to classes.
* Inherits::            Inheriting code from other classes.
* Implements::          Implementing interfaces.
* Contracts::           Contracting interfaces.
* Class Attributes::    Attributes of classes.
* Class Methods::       Methods of classes.
* Class Invariants::    Class invariants.
@end menu


@node Class Parameters
@subsection Class Parameters

A class declaration specifies the name of the class, which must
start with an upper-case letter, and optionally a list of @emph{class
parameters}.  These parameters are like read-only attributes of the
class and provide the signature of the @emph{only} constructor.


@node Inherits
@subsection Inheritance

A class can inherit from a list of super-classes, which are defined in
an @code{inherits} specification.  A list of super-classes is listed
after the @code{inherits} keyword.  Each super-class must specify
values for the classes @emph{class parameters},
@pxref{Class Parameters}.

The programmer must be aware of @acronym{CREOL}'s behaviour if a class is
inherited multiple times, @pxref{Inheritance} for a discussion.


@node Implements
@subsection Implementing Interfaces

For a class to be able to call other methods and to be called by other
objects it must define the interfaces it implements.  @acronym{CREOL} knows
about two distinct ways to implement classes.  The first and weaker
version is by declaring the interfaces using the @code{implements}
keyword.  A class claiming to implement an interface must implement
all methods specified in this interface.  Since interfaces also
specify behaviour for methods, the method implementation must
implement the specified behaviour@footnote{Whether a class implements
an interface cannot be determined statically, therefore the compiler
does not check this.}.  Unlike in the Java Programming Language, the
information on implementing interfaces is @emph{not} inherited by
other classes.  This supports code reuse without affecting reasoning
control.


@node Contracts
@subsection Contracting Interfaces

Additionally, a class can @emph{contract} an interface using the
@code{contracts} keyword instead of @code{implements}.  The
differences between implements and contracts are subtle.  Contracts
imposes all obligations on a class that are imposed on the class using
the @code{implements} keyword.  It will place one additional
obligation on the system: All future subclasses of this class are also
contracting (and therefore implementing) that interface.  The
@code{contracts} keyword behaves like the corresponding implements
keyword in the Java Programming Language.

An interface @code{I} needs to be contracted, if the class uses that
interface to satisfy a co-interface requirement.  This means, that a
method in a class is calling a method, which requires @code{I} as a
co-interface.  This requirement is imposed, because a method can call
the caller of a method using the co-interface.  If a class calls a
method of an object it may only do so if it satisfies the co-interface
requirement.  Because that method may be inherited, the class must
contract the interface to keep the method type safe for all
sub-classes.


@node Class Attributes
@subsection Class Attributes

A class may specify a list of attributes or class variables.  These
attributes store the persistent state of an object.  An attribute
declaration has the form @code{var @var{name}: @var{type}} and may also
be initialised in that statement, i.e., @code{var @var{name}:
@var{type} := @var{expression}}.  The declaration of a class attribute
may optionally be terminated with a semicolon.

The expression may be any constant expression or it may refer to the
parameters of the current class, the super classes, and the super
classes attributes, but not to the attributes of the current class.

The programmer may not assume any order in which these initialisations
are evaluated.  If such an order is necessary, then the initialisation
has to be done in the @code{init} method.  However, the direct initialisation
of class parameters is executed before the body of the @code{init} method is
executed.


@node Class Methods
@subsection Methods

A class may then specify a list of private methods.

A class may specify a list of public methods by using a @emph{with
definition}.  A with definition has the format @code{with
@var{interface} @var{operations} @var{invariants}}, where
@code{with @var{interface}} specifies the co-interface.


@node Class Invariants
@subsection Class Invariants

Classes may specify class invariants.  Invariants which apply to all
methods provided by a class must be specified in the internal section,
before the first @code{with} declaration.  An invariant is specified
with @code{inv @var{I}}, where @var{I} is the invariant.

The syntax for invariants is not yet specified, but all valid
expressions of type Boolean are accepted as invariants.


@node Data Type Declaration
@section Data Type Declarations

A data type declaration defines a new data type.  The syntax of a
data type declaration is @code{datatype @var{T} [ of @{ @var{S} , @}
]}, where @var{T} is the new type and @var{S} is a list of possible
super-types.

Currently, data type are all abstract.


@node Parse Errors
@section A Note on Parse Errors

Syntactically incorrect programs will be rejected by the parser, but
the error the parser reports can be confusing.  We explain the most
common confusing error messages and explain, why these error messages
are hard (or impossible) to improve.


@subsection Missing @code{end}

Consider the following class:
@example
class A
  op init == if true then skip
end
@end example

The indentation of this code snippet suggest that the programmer has
omitted the end of the @code{if} statement.  The parser has a different
view, since it is insensitive to indentation.  It will use the
@code{end} on the following line to build an @code{if} statement.  It
will then look for a composition operator for continuing to parse a
method body, or for an @code{op} or @code{end} to finish parsing the
method body.  But now the parser encounters @emph{the end of the file}.
It will then report an error for the definition of the method body.


@c  LocalWords:  @acronym{CREOL} Datatype
