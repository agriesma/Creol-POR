@node creolc
@chapter The @command{creolc} compiler
@cindex @command{creolc}

The @emph{Creol tools} provide a compiler from the Creol language,
@pxref{Creol}, into various other formats, most importantly the
@emph{Creol Machine Code}, @pxref{CMC}.  In this chapter we describe
how one may use the compiler.

The compiler @command{creolc} is a command-line tool.  Its user
interface follows the @emph{Unix}-tradition: it can be integrated into
pipes, and will not output anything except to report errors or if
explicitly requested to.

@menu
* Invoking creolc::           Command line arguments.
@end menu


@node Invoking creolc
@section @command{creolc} Command Options.

When invoking @command{creolc}, it normally does compile its input
file into one Maude module describing the program.

The @command{creolc} compiler accepts options and filenames as
operands.  Many options have multi-letter names; therefore multiple
single-letter options may @emph{not} be grouped:  @option{-dr} is
very different from @option{-d -r}.

You can mix options and other arguments.  for the most part, the order
of arguments does not matter.  Order matters if you use several
options of the same kind.  If you, for example, supply mutliple
warning options, they are enabled and disabled in order from left to
right.

@menu
* Overall Options::           Controlling the general behaviour.
* Warning Options::           How picky should the compiler be?
* Debugging Options::         Tables, measurements, and debugging dumps.
* Pass Options::              Which passes should be applied?
* Target Options::            What should be output?
@end menu


@node Overall Options
@subsection Overall Options

For any given input file, the name of the file suffix determines what
kind of compilation is done:

@table @option
@item FILE.creol
A Creol program that must be compiled.
@end table

Other options are:
@table @option
@item -o FILE
Place the output in file @option{FILE}.  This applies regardless to
whatever sort of output is being produced.

Since only one output file can be specified, it does not make sense to
use @option{-o} multiple times, even if more than one input file is
provided.

If @option{-o} is not provided, the default is to write the output
into @file{creolc.out}.  If a file of the output name already exists,
it may be overwritten.

The file name @file{-} instructs the compiler to write the file to the
standard output.  This allows processing of the output by other tools.

@item -v
Print (on standard error) some information on the passes applied to
the input program.

@item -help
Print (on standard output) a description of the command line options
understood by @command{creolc}.

@item -version
Print (on standard output) the version number and copyrights of the
invoked @command{creolc} compiler.
@end table



@node Warning Options
@subsection Warning Options

The @command{creolc} allows to enable or disable certain warnings
which may indicate possible errors in the input program.  @option{-w
@var{NAME}} is used to @emph{enable} are particular warning, whereas
@option{-W @var{NAME}} is used to @emph{disable} the same warning.
The warnings currently understood are:
@table @option
@item all
Enables/disables all the warnings listen below.
@end table


@node Debugging Options
@subsection Debugging Options

The compiler provides some options which help in debugging the
compiler itself: if you are interested in what the compiler is doing
or if you suspect a bug in the compiler, the following options may
help in understanding what the compiler does and how much time it
spent for what.  However, these options are of little use for normal
users.

@table @option
@item -dump @var{name}
Write the tree returned after the pass @var{name} to the file
@file{out.@var{name}} as an XML document.  @xref{Pass Options}.

@item -times
Measure the time used for a pass and print a summary of time spent for
each pass after finishing the compilation.
@end table



@node Pass Options
@subsection Pass Options

The compiler implements passes and analysis in different passes.  The
option @option{-p @var{name}} enables a particular pass @var{name},
whereas @option{-P @var{name}} disables it.

Some passes, however, have dependencies on other passes, as stated
below.  If you enable such a pass, all the ones it depends on are
enabled.  If you disable a pass in the command line, and there is
another pass enabled that depends on the disabled one, the behaviour
of the compiler is undefined.

@table @option
@item all
Enables all passes.

@item liveness
Compute live ranges of labels and variables.

@item deadvars
Insert instructions which remove dead variables from the state.
Depends on @option{liveness}.

@item tailcall
Perform tailcall optimisations.

@end table


@node Target Options
@subsection Target Options

The @command{creolc} compiler can output the result of its passes into
many output formats.  A target option has the form @option{-target
@var{NAME}}, where @var{NAME} is of the list given below.  If multiple
target options are provided, only the latest one is effective, except
an unknown target is provided.  In that case, the compiler will abort
with an error message.  Currently, the following target languages are
supported:

@table @option
@item none
Only parse and analyse the program but do @emph{not} write any
output.

@item creol
Output the transformed program as a Creol program.  Without any
passes, this target can be used as a pretty printer for Creol
programs.  Virtual statements, which may be inserted during the
compiler, are output in comments.

Comments which occurred in the source file are @emph{not} written into
the output, because the compiler ignores comments in the source files
and discards them during parsing.

@item maude
Output the transformed program as Creol Machine Code.  In this mode,
the resulting maude file uses the @emph{interpreter} for Creol.

@item maudemc
Output the transformed program as Creol Machine Code.  In this mode,
the resulting maude file uses the @emph{model checker} for Creol.

@item xml
Output the transformed program as an XML document.  The resulting XML
file is equivalent to the debugging dump after the final pass, but its
name is determined by the @option{-o} option.
@end table



If the target is either @option{maude} or @option{maudemc}, the
following options are respected:
@table @option
@item -red-init
If this option is given, the line @code{red init .} is appended to the
output file, causing Maude to reduce the initial configuration after
loading the output.

@item -main @var{NAME}
Appends @code{main(@var{NAME}, emp)} to the initial configuration,
causing the creation of an instance of @var{NAME} while reducing the
initial configuration.
@end table

