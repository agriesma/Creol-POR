@node Introduction
@chapter Introduction

@acronym{CREOL}: An exciting mix of the best ingredients from many cultures!


@acronym{CREOL}: A formal framework for reflective component modelling

The goal of @acronym{CREOL} is to develop a formal framework and tool
for reasoning about dynamic and reflective modifications in
object-oriented open distributed systems, ensuring reliability and
correctness of the overall system.

@menu
* Overview::            What is @acronym{CREOL} about?
* Features Of CREOL::   Features Of @acronym{CREOL}.
* Reporting Bugs::      Where do I report bugs to?
@end menu


@node Overview
@section Overview

Open distributed systems consist of geographically spread system
components subject to run-time modifications. These systems are
becoming increasingly important in modern society, for instance for
safety-critical infrastructure. A major challenge for safety-critical
open distributed systems is to ensure the reliability and correctness
of the overall system when components are dynamically modified, so
that development, maintenance, and upgrade of system components happen
in a controlled manner.

The @acronym{CREOL} language contains programming constructs and
reasoning control in the context of open distributed systems, and in
particular the issue of maintenance control, taking an object-oriented
approach. The project focuses on support for component adaptability,
combined with a platform for executable specification and analysis of
system models. This allows an investigation at two levels: a
theoretical framework for reasoning about software and software
updates, and a tool for practical experimentation with the
consequences and possibilities of the theoretical choices. The goal of
the project is to develop a formal framework and tool for reasoning
about dynamic and reflective modifications in open distributed
systems, ensuring reliability and correctness of the overall system.

These issues will be investigated in the context of @acronym{CREOL}, an
experimental high-level object-oriented language for distributed
objects. The name is an acronym for Concurrent Reflective
Object-oriented Language. The language is based on concurrent objects
communicating by means of asynchronous method calls, and is formally
defined with an operational semantics expressed in rewriting
logic.

Specifications in rewriting logic are executable in the rewriting
logic tool Maude. A prototype Maude interpreter for the communication
basis of the @acronym{CREOL} language has been developed and extended with a
pseudo-deterministic rewrite strategy in order to better simulate the
non-determinism of a distributed environment.


@node Features Of CREOL
@section Features Of @acronym{CREOL}

@acronym{CREOL} is a @emph{strongly typed} language, in the sense that function
and method calls which disregard data types are rejected.

@acronym{CREOL} is a @emph{statically typed} language.  The compiler tries to
infer, whether a function call or a method call is safe in the sense
that it will succeed.  Programs in which a call cannot succeed because
of the type of an operation or a method are rejected.

Message dispatch in @acronym{CREOL} is based not only on the type of the
receiver of the message, but also on the arguments (multiple
dispatch), especially the type of the caller (which is constrained by
the @emph{co-interface} and available in any method body under the
name @code{caller}.

The @code{caller} mechanism is similar to @code{context} in Smalltalk-80,
but it does not, e.g., provide information on the call-chain.



@node Reporting Bugs
@section Reporting Bugs

@acronym{CREOL} and its tools contain probably mistakes.  We try hard
to find all of them and correct them.  If You find an error in the
tools, the language, or its documentation, we will appreciate Your
report, investigate the issue, and repair it in some manner.

Writing a Bug report that is useful to us is not simple.  We ask you
to read @cite{E.@: Hendrickson, Writing Effective Bug Reports, p.@:
10--11, @acronym{STQE}, July/August 2001}, available from
@url{http://testobsessed.com/wordpress/wp-content/uploads/2007/01/webr.pdf}
(accessed February 13, 2008), and follow the guide lines described in
that paper.  The better Your report is, the easier it is to identify
the cause of the error and to correct it.

Generally speaking, we ask You to include at least this information in
your report:
@itemize @bullet
@item
the version number of @code{creoltools} and the program(s) or
manual(s) involved.

@item
hardware and operating system names and versions.

@item
the version of the Objective Caml compiler, findlib, ocaml-libxml2 and
how they have been configured.

@item
the contents of any input files necessary to reproduce the bug.  The
smaller the input, the better.

@item
a description of the problem and samples of any erroneous output or
behaviour.

@item
any unusual options you gave to configure.

@item
anything else that you think would be helpful. 
@end itemize

Once you have written your report, please send it as an e-mail in
plain ASCII format to @email{kyas@@ifi.uio.no}.  We are afraid that we
cannot accept bug reports sent as HTML e-mails.
