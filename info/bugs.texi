@node Reporting Bugs
@appendix How to Write a Good Bug Report
@cindex Reporting Bugs

Identifying and correcting errors in the compiler or the interpreter
is often a hard task.  If you observe some unexpected behaviour of a
program with the interpreter may hint at an error, but often the
behaviour is the result of the non-determinism inherent to Creol, and
therefore most likely correct behaviour.  If a specific behaviour is
@emph{not} observed, it may also be the result of non-determinism, but
most probably it is the result of the scheduling choices made by Maude.
Unfortunately, using Maude's @code{search} command often cannot be used
to check whether the desired behaviour is possible, because the state
space of a Creol program can grow tremendously.  Still, we are interested
in identifying mistakes and correcting them.  This appendix collects
guidelines on writing @emph{good} bug reports.


@appendixsec Describe Your Environment

We will try to reproduce your error.  In order to be able to do this,
we need to know as much as possible about your environment.  This
information includes information about:

@itemize @bullet
@item
Your operating system.  Be as precise as possible.  In case of Linux
state the distribution and its version.  @command{uname -a} will provide
a summary of relevant information on the kernel.  Tell us the version
of the C library.

@item
The tool chain.  Please tell us the output of
@command{gcc -v}, @command{ocamlc -version}, @command{maude --version}
and the files @file{config.log} and @file{xml/config.log} generated by the
configure scripts used to build the tools.

@item
Your hardware.  It suffices to mention the general architecture, but
sometimes the erroneous behaviour may be triggered by a faulty processor.
Under Linux the relevant information can be obtained with
@command{cat /proc/cpuinfo}

@item
The results of the test suite.  Often, the error manifests itself in
the test suite.  Then the information gathered here is sufficient to
identify and correct the error.

@end itemize

We provide a small script (@command{creolbug} which collects this
information and writes it to standard output.  The script currently
works for linux only.  It will not be installed but generated in the
build directory.

If the error does not occur in the test suite, then we ask you to provide
a test case displaying the error.


@appendixsec Provide a Test Case

In order to decide whether your observation is a mistake in our program,
a mistake in your program, a misunderstanding on your side, or even a
mistake in the tool chain we need to have a good test case.  A bug report
that consists of a program (possibly some hundred lines) together with the
remark ``it does not work'' @emph{will} be ignored, not only because we
cannot read your mind.

Please try to provide a @emph{small} test case.  A good idea is to
successively remove code from the original program and trying to check
whether the persumably erroneous behaviour persists.  Make sure that you
have removed as much as possible.

The second step is to describe the actual result.

The third step is describing the @emph{expected} behaviour.  ``It does
not work'' tells us nothing about why you believe that it does not work.
Please explain why you believe that the actual result differs from the
expected result.

If you send us a test case we kindly request that each source file
identifies its author, together with his e-mail address, and a
license allowing us (and others) to redistribute the test case under
the terms of the GPL.
